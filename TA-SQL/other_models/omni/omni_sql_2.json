{
  "0": "SELECT MAX( CASE WHEN T1.`Enrollment (K-12)` = 0 THEN NULL ELSE T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` END ) AS MaxEligibleFreeRate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Alameda';",
  "1": "SELECT CAST(`Free Meal Count (Ages 5-17)` AS REAL) / `Enrollment (Ages 5-17)` AS EligibleFreeRate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsName = 'Continuation School' AND `Enrollment (Ages 5-17)` > 0 ORDER BY EligibleFreeRate ASC LIMIT 3;",
  "2": "SELECT schools.Zip FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`District Name` = 'Fresno County Office of Education';",
  "3": "SELECT schools.MailStreet FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 1;",
  "4": "SELECT schools.Phone FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.FundingType = 'Directly funded' AND schools.OpenDate > '2000-01-01';",
  "5": "SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrMath > 400;",
  "6": "SELECT schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;",
  "7": "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1;",
  "8": "SELECT satscores.NumTstTakr FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm );",
  "9": "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Directly funded';",
  "10": "SELECT F.`FRPM Count (Ages 5-17)` FROM schools AS S INNER JOIN satscores AS SAT ON S.CDSCode = SAT.cds INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode ORDER BY SAT.AvgScrRead DESC LIMIT 1;",
  "11": "SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500;",
  "12": "SELECT MAX(fpm.`Free Meal Count (Ages 5-17)` / fpm.`Enrollment (Ages 5-17)`) AS MaxFreeRate FROM satscores AS sat INNER JOIN frpm AS fpm ON sat.cds = fpm.CDSCode WHERE sat.NumGE1500 / sat.NumTstTakr > 0.3;",
  "13": "SELECT s.Phone FROM satscores AS sc INNER JOIN schools AS s ON sc.cds = s.CDSCode WHERE sc.NumTstTakr > 0 ORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) DESC LIMIT 3;",
  "14": "SELECT schools.NCESSchool FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5;",
  "15": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;",
  "16": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T1.StatusType = 'Merged' AND T2.NumTstTakr < 100;",
  "17": "SELECT schools.CharterNum FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite > 499 AND schools.CharterNum IS NOT NULL ORDER BY satscores.AvgScrWrite DESC;",
  "18": "SELECT COUNT(DISTINCT schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Fresno' AND schools.FundingType = 'Directly funded' AND satscores.NumTstTakr <= 250;",
  "19": "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 1;",
  "20": "SELECT COUNT(DISTINCT T2.CDSCode) AS SchoolCount FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Amador' AND T2.`Low Grade` = '9' AND T2.`High Grade` = '12';",
  "21": "SELECT COUNT(*) FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Free Meal Count (K-12)` > 500 AND f.`FRPM Count (K-12)` < 700;",
  "22": "SELECT s.sname FROM satscores AS s INNER JOIN schools AS sc ON s.cds = sc.CDSCode WHERE sc.County = 'Contra Costa' ORDER BY s.NumTstTakr DESC LIMIT 1;",
  "23": "SELECT schools.School AS School_Name, schools.Street AS Street_Address FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30 ORDER BY (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) DESC;",
  "24": "SELECT frpm.`School Name` FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds WHERE frpm.`Percent (%) Eligible Free (K-12)` > 0.1 AND satscores.NumGE1500 > 0;",
  "25": "SELECT T1.School, T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' GROUP BY T1.School HAVING AVG(T2.AvgScrMath) > 400;",
  "26": "SELECT schools.School, schools.Street, schools.City, schools.State, schools.Zip FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Monterey' AND schools.EILName = 'High School' AND frpm.\"FRPM Count (Ages 5-17)\" > 800;",
  "27": "SELECT satscores.AvgScrWrite, satscores.sname, schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.OpenDate > '1991-12-31' OR schools.ClosedDate < '2000-01-01';",
  "28": "-- SQL Query to find schools with a difference greater than the average SELECT s.School, s.DOCType FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.FundingType = 'Locally funded' AND (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > ( SELECT AVG(f2.`Enrollment (K-12)` - f2.`Enrollment (Ages 5-17)`) FROM frpm f2 INNER JOIN schools s2 ON s2.CDSCode = f2.CDSCode WHERE s2.FundingType = 'Locally funded' );",
  "29": "SELECT s.OpenDate FROM frpm AS f INNER JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE s.GSoffered = 'K-12' ORDER BY f.`Enrollment (K-12)` DESC LIMIT 1;",
  "30": "SELECT DISTINCT schools.City FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 5;",
  "31": "SELECT CAST(f.\"Free Meal Count (K-12)\" AS REAL) / f.\"Enrollment (K-12)\" AS EligibleFreeRate FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.\"Enrollment (K-12)\" DESC LIMIT 2 OFFSET 9;",
  "32": "SELECT (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS FRPM_Rate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 5;",
  "33": "SELECT schools.Website, schools.School FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `FRPM Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
  "34": "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / frpm.`Enrollment (Ages 5-17)` AS FreeRate FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';",
  "35": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1;",
  "36": "-- SQL query to find the full names of administrators for the school with the highest number of students scoring 1500 or more on the SAT SELECT COALESCE(AdmFName1, AdmFName2, AdmFName3) AS First_Name, COALESCE(AdmLName1, AdmLName2, AdmLName3) AS Last_Name FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 ) ORDER BY First_Name, Last_Name;",
  "37": "SELECT schools.Street, schools.City, schools.Zip, schools.State FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) ASC LIMIT 1;",
  "38": "SELECT schools.Website FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000;",
  "39": "SELECT AVG(satscores.NumTstTakr) AS AverageTestTakers FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Fresno' AND STRFTIME('%Y', schools.OpenDate) = '1980';",
  "40": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.dname = 'Fresno Unified' ORDER BY T1.AvgScrRead ASC LIMIT 1;",
  "41": "WITH RankedSchools AS ( SELECT s.School, s.County, ss.AvgScrRead, ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank FROM schools s INNER JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Virtual = 'F' ) SELECT School FROM RankedSchools WHERE rank <= 5;",
  "42": "SELECT schools.EdOpsName FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1;",
  "43": "SELECT s.AvgScrMath, sc.County FROM satscores AS s INNER JOIN schools AS sc ON s.cds = sc.CDSCode ORDER BY (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) ASC LIMIT 1;",
  "44": "SELECT satscores.AvgScrWrite, schools.City FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1;",
  "45": "SELECT T1.School, AVG(T2.AvgScrWrite) AS AvgWritingScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds AND T1.School = T2.sname WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.School;",
  "46": "SELECT s.School FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.DOC = '31' AND s.DOCType = 'State Special Schools' ORDER BY f.`Enrollment (K-12)` DESC LIMIT 1;",
  "47": "SELECT CAST(COUNT(School) AS REAL) / 12 AS MonthlyAverage FROM schools WHERE County = 'Alameda' AND DOC = 52 AND STRFTIME('%Y', OpenDate) = '1980';",
  "48": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END), 0) AS Ratio FROM schools WHERE County = 'Orange' AND StatusType = 'Merged';",
  "49": "SELECT s.County, s.School, s.ClosedDate FROM schools s WHERE s.StatusType = 'Closed' AND s.County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1 );",
  "50": "SELECT schools.Street, schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 6, 1;",
  "51": "SELECT schools.MailStreet, schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrRead ASC LIMIT 1;",
  "52": "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500 AND T2.MailCity = 'Lakeport';",
  "53": "SELECT SUM(satscores.NumTstTakr) AS TotalTestTakers FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno';",
  "54": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian';",
  "55": "SELECT CASE WHEN SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) = 0 THEN NULL ELSE CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) END AS Ratio FROM schools WHERE MailState = 'CA';",
  "56": "SELECT COUNT(*) AS ActiveSchoolCount FROM schools WHERE MailState = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active';",
  "57": "SELECT schools.Phone, schools.Ext FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrWrite DESC LIMIT 332, 1;",
  "58": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704';",
  "59": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez');",
  "60": "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';",
  "61": "SELECT COUNT(*) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman';",
  "62": "SELECT COUNT(T1.CDSCode) AS TotalNonCharteredSchools FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND (T2.`Free Meal Count (K-12)` * 100.0 / T2.`Enrollment (K-12)`) < 0.18;",
  "63": "SELECT AdmFName1 || ' ' || AdmLName1 AS FullName, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName1 IS NOT NULL AND AdmLName1 IS NOT NULL UNION SELECT AdmFName2 || ' ' || AdmLName2 AS FullName, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName2 IS NOT NULL AND AdmLName2 IS NOT NULL UNION SELECT AdmFName3 || ' ' || AdmLName3 AS FullName, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND AdmFName3 IS NOT NULL AND AdmLName3 IS NOT NULL;",
  "64": "SELECT COUNT(*) AS TotalSchools FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';",
  "65": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS RatioInPercentage FROM schools WHERE County = 'Santa Clara';",
  "66": "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus';",
  "67": "SELECT COUNT(*) AS ClosureCount FROM schools WHERE StatusType = 'Closed' AND DOCType = 'Community College District' AND City = 'San Francisco' AND STRFTIME('%Y', ClosedDate) = '1989';",
  "68": "SELECT County FROM schools WHERE SOC = 11 AND StatusType = 'Closed' AND STRFTIME('%Y', ClosedDate) BETWEEN '1980' AND '1989' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;",
  "69": "SELECT NCESDist FROM schools WHERE SOC = 31;",
  "70": "SELECT COUNT(*) AS SchoolCount FROM schools WHERE StatusType IN ('Active', 'Closed') AND County = 'Alpine' AND SOCType = 'District Community Day Schools';",
  "71": "SELECT DISTINCT DOC FROM schools WHERE City = 'Fresno' AND Magnet = 0;",
  "72": "SELECT T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Fremont' AND T1.EdOpsCode = 'SSS' AND T2.`Academic Year` = '2014-2015';",
  "73": "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsName = 'Youth Authority School' AND schools.MailStrAbr = 'PO Box 1040';",
  "74": "SELECT DISTINCT T2.`Low Grade` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EdOpsCode = 'SPECON' AND T1.NCESDist = '0613360';",
  "75": "SELECT schools.EILName, schools.School FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND frpm.`County Code` = '37';",
  "76": "SELECT schools.City FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Lunch Provision 2' AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12' AND schools.EILCode = 'HS' AND schools.County = 'Merced';",
  "77": "SELECT schools.School, (frpm.`FRPM Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) * 100 AS FRPM_Percent FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND schools.GSoffered = 'K-9';",
  "78": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1;",
  "79": "SELECT County, COUNT(CDSCode) AS SchoolCount FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;",
  "80": "SELECT School, Latitude, SOCType FROM schools ORDER BY Latitude DESC LIMIT 1;",
  "81": "SELECT schools.City, frpm.`Low Grade`, schools.School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.State = 'CA' ORDER BY schools.Latitude ASC LIMIT 1;",
  "82": "SELECT GSoffered FROM schools WHERE ABS(Longitude) = (SELECT MAX(ABS(Longitude)) FROM schools);",
  "83": "SELECT schools.City, COUNT(schools.CDSCode) AS SchoolCount FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 1 AND schools.GSserved = 'K-8' AND frpm.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY schools.City;",
  "84": "-- SQL query to find the two most common first names among school administrators SELECT AdmFName, District, COUNT(*) AS NameCount FROM ( -- Combine first names from AdmFName1, AdmFName2, and AdmFName3 SELECT AdmFName1 AS AdmFName, District FROM schools UNION ALL SELECT AdmFName2, District FROM schools UNION ALL SELECT AdmFName3, District FROM schools ) AS CombinedNames GROUP BY AdmFName, District ORDER BY NameCount DESC LIMIT 2;",
  "85": "SELECT (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) * 100 AS Percent_Eligible_Free_K12, schools.DOC FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Alusine';",
  "86": "SELECT DISTINCT AdmLName1, District, County, School FROM schools WHERE CharterNum = 40;",
  "87": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND SOC = 62 AND DOC = 54 AND AdmEmail1 IS NOT NULL AND AdmEmail2 IS NOT NULL AND AdmEmail3 IS NOT NULL;",
  "88": "SELECT schools.AdmEmail1, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1;",
  "89": "SELECT COUNT(*) FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND d.A3 = 'east Bohemia';",
  "90": "SELECT COUNT(DISTINCT T2.account_id) AS eligible_accounts FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.A3 = 'Prague';",
  "91": "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' WHEN AVG(A12) < AVG(A13) THEN '1996' ELSE 'Equal' END AS higher_unemployment_year FROM district;",
  "92": "SELECT COUNT(DISTINCT D.district_id) AS num_districts FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE D.A11 > 6000 AND D.A11 < 10000 AND C.gender = 'F';",
  "93": "SELECT COUNT(c.client_id) FROM client AS c INNER JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'north Bohemia' AND d.A11 > 8000;",
  "94": "-- SQL query to find the account numbers of the oldest female client with the lowest average salary and calculate the gap WITH OldestFemaleClient AS ( SELECT c.client_id, d.district_id, d.A11 AS district_avg_salary, c.birth_date FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC LIMIT 1 ), AccountNumbers AS ( SELECT a.account_id FROM account a JOIN OldestFemaleClient o ON a.district_id = o.district_id ) SELECT an.account_id, (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district) AS salary_gap FROM AccountNumbers an;",
  "95": "-- SQL query to find account numbers of the youngest client with the highest average salary SELECT DISTINCT a.account_id FROM account a INNER JOIN disp d ON a.account_id = d.account_id INNER JOIN client c ON d.client_id = c.client_id INNER JOIN district di ON c.district_id = di.district_id WHERE c.birth_date = ( SELECT MAX(birth_date) FROM client ) AND di.A11 = ( SELECT MAX(A11) FROM district );",
  "96": "SELECT COUNT(DISTINCT disp.client_id) AS owner_count FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';",
  "97": "SELECT disp.client_id FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'DISPONENT' AND account.frequency = 'POPLATEK PO OBRATU';",
  "98": "SELECT T2.account_id, T1.amount AS lowest_amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A' AND strftime('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = ( SELECT MIN(amount) FROM loan WHERE status = 'A' AND strftime('%Y', date) = '1997' );",
  "99": "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND loan.status = 'A' AND strftime('%Y', account.date) = '1993' ORDER BY loan.amount DESC LIMIT 1;",
  "100": "SELECT COUNT(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Sokolov';",
  "101": "SELECT account_id FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31' AND date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31');",
  "102": "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' GROUP BY account.account_id HAVING SUM(trans.amount) > 3000;",
  "103": "SELECT disp.client_id FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03';",
  "104": "SELECT account.date FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.amount = 840 AND trans.date = '1998-10-14';",
  "105": "SELECT account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'A' AND loan.date = '1994-08-25';",
  "106": "SELECT MAX(amount) FROM trans WHERE account_id IN ( SELECT account_id FROM disp WHERE client_id IN ( SELECT client_id FROM disp WHERE disp_id IN ( SELECT disp_id FROM card WHERE issued = '1996-10-21' ) ) );",
  "107": "SELECT c.gender FROM client c INNER JOIN account a ON c.client_id = a.account_id INNER JOIN district d ON a.district_id = d.district_id WHERE d.district_id = ( SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1 ) ORDER BY c.birth_date ASC LIMIT 1;",
  "108": "-- SQL query to find the first transaction amount for the client who applied the largest loan WITH LargestLoan AS ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 ) SELECT t.amount FROM trans t INNER JOIN LargestLoan ll ON t.account_id = ll.account_id ORDER BY t.date ASC LIMIT 1;",
  "109": "SELECT COUNT(DISTINCT client.client_id) AS female_client_count FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.A2 = 'Jesenik' AND client.gender = 'F';",
  "110": "SELECT disp.disp_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02';",
  "111": "SELECT COUNT(*) AS account_count FROM district AS d INNER JOIN account AS a ON d.district_id = a.district_id WHERE d.A2 = 'Litomerice' AND STRFTIME('%Y', a.date) = '1996';",
  "112": "SELECT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';",
  "113": "SELECT client.birth_date FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';",
  "114": "SELECT A.account_id FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id INNER JOIN disp AS Di ON A.account_id = Di.account_id INNER JOIN client AS C ON Di.client_id = C.client_id WHERE D.A3 = 'Prague' ORDER BY A.date ASC LIMIT 1;",
  "115": "SELECT (CAST(COUNT(CASE WHEN client.gender = 'M' THEN 1 END) AS REAL) * 100) / COUNT(*) AS percentage_male_clients FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'south Bohemia' AND district.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia');",
  "116": "-- SQL query to calculate the increase rate of account balance WITH loan_approval AS ( SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1 -- Ensure we only get one account_id ), balance_1993 AS ( SELECT balance AS balance_1993_03_22 FROM trans WHERE account_id = (SELECT account_id FROM loan_approval) AND date = '1993-03-22' LIMIT 1 -- Ensure we only get one balance ), balance_1998 AS ( SELECT balance AS balance_1998_12_27 FROM trans WHERE account_id = (SELECT account_id FROM loan_approval) AND date = '1998-12-27' LIMIT 1 -- Ensure we only get one balance ) SELECT ( (balance_1998_12_27 - balance_1993_03_22) * 100.0 / balance_1993_03_22 ) AS increase_rate FROM balance_1998, balance_1993;",
  "117": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0) / SUM(amount) AS percentage_paid_with_no_issue FROM loan;",
  "118": "SELECT CAST(SUM(CASE WHEN status = 'C' AND amount < 100000 THEN amount ELSE 0 END) AS REAL) * 100.0 / SUM(amount) AS percentage FROM loan;",
  "119": "SELECT account.account_id, district.A2 AS district_name, district.A3 AS region FROM account INNER JOIN district ON account.district_id = district.district_id WHERE STRFTIME('%Y', account.date) = '1993' AND account.frequency = 'POPLATEK PO OBRATU';",
  "120": "SELECT DISTINCT account.account_id, account.frequency FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE district.A3 = 'east Bohemia' AND account.date >= '1995-01-01' AND account.date <= '2000-12-31';",
  "121": "SELECT account.account_id, account.date FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.A2 = 'Prachatice';",
  "122": "SELECT district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;",
  "123": "SELECT loan.account_id, district.A2 AS district_name, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;",
  "124": "SELECT loan.loan_id, district.A3 AS district, district.A11 AS average_salary FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60;",
  "125": "SELECT district.A2 AS district_name, ((district.A13 - district.A12) * 100.0 / district.A12) AS unemployment_increment FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D';",
  "126": "SELECT CAST(SUM(CASE WHEN T1.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993';",
  "127": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';",
  "128": "SELECT T2.A2 AS district_name, COUNT(T1.client_id) AS female_client_count FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY female_client_count DESC LIMIT 9;",
  "129": "SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM trans t INNER JOIN account a ON t.account_id = a.account_id INNER JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;",
  "130": "SELECT COUNT(DISTINCT T3.client_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id LEFT JOIN disp AS T4 ON T3.client_id = T4.client_id LEFT JOIN card AS T5 ON T4.disp_id = T5.disp_id WHERE T1.A3 = 'South Bohemia' AND T5.card_id IS NULL;",
  "131": "SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loan_count FROM district AS d INNER JOIN account AS a ON d.district_id = a.district_id INNER JOIN loan AS l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1;",
  "132": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';",
  "133": "SELECT district_id, A2 FROM district ORDER BY A13 DESC;",
  "134": "SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1 );",
  "135": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK MESICNE' AND T2.balance < 0 AND T2.operation = 'VYBER KARTOU';",
  "136": "SELECT COUNT(loan.loan_id) AS approved_loans FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.status = 'A' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31';",
  "137": "SELECT COUNT(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status = 'C';",
  "138": "-- SQL query to find the number of male clients in the branch with the second-highest number of crimes in 1995 SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = ( SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1 );",
  "139": "SELECT COUNT(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.type = 'OWNER' AND card.type = 'gold';",
  "140": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Pisek';",
  "141": "SELECT D.A2 AS district_name FROM trans AS T INNER JOIN account AS A ON T.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE T.amount > 10000 AND strftime('%Y', T.date) = '1997';",
  "142": "SELECT DISTINCT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN `order` AS T3 ON T2.account_id = T3.account_id WHERE T1.A2 = 'Pisek' AND T3.k_symbol = 'SIPO';",
  "143": "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold';",
  "144": "SELECT AVG(amount) AS average_withdrawal FROM trans WHERE STRFTIME('%Y', date) = '2021' AND operation = 'VYBER KARTOU';",
  "145": "SELECT account_id FROM trans WHERE operation = 'VYBER KARTOU' AND date BETWEEN '1998-01-01' AND '1998-12-31' AND amount < ( SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND date BETWEEN '1998-01-01' AND '1998-12-31' );",
  "146": "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F' AND disp.type = 'OWNER';",
  "147": "SELECT COUNT(DISTINCT account.account_id) AS female_account_count FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia';",
  "148": "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';",
  "149": "SELECT DISTINCT disp.type FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000;",
  "150": "SELECT COUNT(DISTINCT account.account_id) AS account_count FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.A3 = 'North Bohemia' AND trans.bank = 'AB';",
  "151": "SELECT DISTINCT district.A2 FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';",
  "152": "SELECT AVG(d.A15) AS average_crimes_1995 FROM district AS d INNER JOIN account AS a ON d.district_id = a.district_id WHERE d.A15 > 4000 AND strftime('%Y', a.date) >= '1997';",
  "153": "SELECT COUNT(*) FROM card AS c INNER JOIN disp AS d ON c.disp_id = d.disp_id WHERE c.type = 'classic' AND d.type = 'OWNER';",
  "154": "SELECT COUNT(*) AS male_client_count FROM client AS c INNER JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha';",
  "155": "SELECT (CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(*) AS percent_gold FROM card;",
  "156": "SELECT c.* FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN account AS a ON d.account_id = a.account_id INNER JOIN loan AS l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan) AND d.type = 'OWNER';",
  "157": "SELECT district.A15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;",
  "158": "SELECT account.district_id FROM `order` INNER JOIN account ON `order`.account_id = account.account_id WHERE `order`.order_id = 33333;",
  "159": "SELECT trans.* FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';",
  "160": "SELECT COUNT(*) FROM account AS a INNER JOIN loan AS l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;",
  "161": "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;",
  "162": "SELECT district.A3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = 3541;",
  "163": "SELECT T2.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A' GROUP BY T2.district_id ORDER BY COUNT(T1.account_id) DESC LIMIT 1;",
  "164": "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 32423;",
  "165": "SELECT trans.* FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.district_id = 5;",
  "166": "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik';",
  "167": "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';",
  "168": "SELECT CAST(SUM(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(client.client_id) AS percentage_female FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON client.district_id = district.district_id WHERE district.A11 > 10000;",
  "169": "SELECT ((SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) * 100 AS growth_rate FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'M';",
  "170": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';",
  "171": "SELECT SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END) AS crime_difference FROM district;",
  "172": "SELECT COUNT(*) AS owner_disp_count FROM disp WHERE type IN ('OWNER', 'DISPONENT') AND account_id BETWEEN 1 AND 10;",
  "173": "-- SQL query to answer the question WITH statement_requests AS ( SELECT COUNT(*) AS request_count FROM trans WHERE account_id = 3 AND k_symbol = 'POPLATEK MESICNE' ), debit_purpose AS ( SELECT k_symbol FROM trans WHERE account_id = 3 AND type = 'VYDAJ' GROUP BY k_symbol HAVING SUM(amount) = 3539 ) SELECT request_count, k_symbol FROM statement_requests, debit_purpose;",
  "174": "SELECT strftime('%Y', birth_date) AS birth_year FROM client WHERE client_id = 130;",
  "175": "SELECT COUNT(DISTINCT account.account_id) AS account_count FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU';",
  "176": "SELECT loan.amount AS total_debt, loan.status AS payment_status FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN loan ON disp.account_id = loan.account_id WHERE client.client_id = 992;",
  "177": "SELECT trans.balance, client.gender FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE trans.trans_id = 851 AND client.client_id = 4;",
  "178": "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 9;",
  "179": "SELECT SUM(trans.amount) AS total_amount_paid FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', trans.date) = '1998';",
  "180": "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'East Bohemia' AND client.birth_date BETWEEN '1983-01-01' AND '1987-12-31';",
  "181": "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;",
  "182": "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.k_symbol = 'SIPO' AND trans.amount > 4000;",
  "183": "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';",
  "184": "SELECT COUNT(DISTINCT client.client_id) AS female_junior_card_customers FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';",
  "185": "SELECT CAST(COUNT(CASE WHEN client.gender = 'F' THEN 1 END) AS REAL) * 100.0 / COUNT(client.client_id) AS female_percentage FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE district.A3 LIKE '%Prague%';",
  "186": "SELECT (CAST(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) AS REAL) * 100.0 / COUNT(c.client_id)) AS percentage_male FROM client c INNER JOIN disp d ON c.client_id = d.client_id INNER JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE';",
  "187": "SELECT COUNT(DISTINCT disp.client_id) AS client_count FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
  "188": "SELECT a.account_id FROM loan l INNER JOIN account a ON l.account_id = a.account_id WHERE l.duration > 24 AND l.status = 'A' AND a.date < '1997-01-01' AND l.amount = ( SELECT MIN(amount) FROM loan WHERE duration > 24 AND status = 'A' );",
  "189": "-- SQL query to find account numbers of the oldest female clients with the lowest average salary SELECT a.account_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN disp dp ON c.client_id = dp.client_id JOIN account a ON dp.account_id = a.account_id WHERE c.gender = 'F' AND c.birth_date = ( -- Subquery to find the earliest birth_date (oldest clients) SELECT MIN(birth_date) FROM client WHERE gender = 'F' ) ORDER BY d.A11 ASC LIMIT 1;",
  "190": "SELECT COUNT(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND client.birth_date LIKE '1920%';",
  "191": "SELECT COUNT(DISTINCT loan.account_id) AS loan_account_count FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';",
  "192": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status IN ('C', 'D');",
  "193": "SELECT DISTINCT c.client_id, c.district_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN ( SELECT o.account_id FROM `order` AS o WHERE o.k_symbol = 'POPLATEK POZDRAZENY' UNION SELECT l.account_id FROM loan AS l ) AS eligible_accounts ON d.account_id = eligible_accounts.account_id WHERE d.type = 'OWNER';",
  "194": "SELECT client.client_id, strftime('%Y', 'now') - strftime('%Y', client.birth_date) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE disp.type = 'OWNER' AND card.type = 'gold';",
  "195": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1;",
  "196": "SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';",
  "197": "SELECT CAST(SUM(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T2.molecule_id) AS avg_oxygen_atoms FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-';",
  "198": "SELECT CAST(COUNT(CASE WHEN B.bond_type = '-' THEN A.atom_id ELSE NULL END) AS REAL) / COUNT(A.atom_id) AS avg_single_bonded_atoms FROM molecule M INNER JOIN atom A ON M.molecule_id = A.molecule_id INNER JOIN connected C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 INNER JOIN bond B ON C.bond_id = B.bond_id WHERE M.label = '+';",
  "199": "SELECT COUNT(DISTINCT T2.molecule_id) AS non_carcinogenic_molecule_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-';",
  "200": "SELECT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';",
  "201": "SELECT CAST(SUM(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(atom.atom_id) AS carbon_percentage FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';",
  "202": "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#';",
  "203": "SELECT COUNT(atom_id) FROM atom WHERE element != 'br';",
  "204": "SELECT COUNT(molecule_id) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';",
  "205": "SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';",
  "206": "SELECT DISTINCT atom1.element FROM connected AS conn INNER JOIN atom AS atom1 ON conn.atom_id = atom1.atom_id INNER JOIN atom AS atom2 ON conn.atom_id2 = atom2.atom_id WHERE conn.bond_id = 'TR004_8_9' UNION SELECT DISTINCT atom2.element FROM connected AS conn INNER JOIN atom AS atom1 ON conn.atom_id = atom1.atom_id INNER JOIN atom AS atom2 ON conn.atom_id2 = atom2.atom_id WHERE conn.bond_id = 'TR004_8_9';",
  "207": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '=' UNION SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '=';",
  "208": "SELECT M.label FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.element = 'h' GROUP BY M.label ORDER BY COUNT(*) DESC LIMIT 1;",
  "209": "SELECT DISTINCT b.bond_type FROM bond AS b INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'cl';",
  "210": "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
  "211": "SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected AS c INNER JOIN atom AS a ON c.atom_id = a.atom_id INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-';",
  "212": "SELECT a.element FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY a.element ORDER BY COUNT(a.element) ASC LIMIT 1;",
  "213": "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8');",
  "214": "-- SQL query to find labels of molecules without tin atoms SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'sn' );",
  "215": "SELECT COUNT(DISTINCT T1.atom_id) AS distinct_atom_count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-';",
  "216": "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
  "217": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181';",
  "218": "-- SQL query to calculate the percentage of carcinogenic molecules without fluorine WITH CarcinogenicMolecules AS ( SELECT DISTINCT molecule_id FROM molecule WHERE label = '+' ), MoleculesWithFluorine AS ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'f' ), CarcinogenicMoleculesWithoutFluorine AS ( SELECT cm.molecule_id FROM CarcinogenicMolecules cm LEFT JOIN MoleculesWithFluorine mf ON cm.molecule_id = mf.molecule_id WHERE mf.molecule_id IS NULL ) SELECT (CAST(COUNT(*) AS REAL) * 100) / (SELECT COUNT(*) FROM CarcinogenicMolecules) AS percentage FROM CarcinogenicMoleculesWithoutFluorine;",
  "219": "SELECT CAST(SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(bond.bond_id) AS percent FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
  "220": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
  "221": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR001_2_6';",
  "222": "SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule;",
  "223": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';",
  "224": "SELECT bond_id FROM connected WHERE atom_id2 = ( SELECT atom_id2 FROM connected WHERE atom_id = 'TR000_2' );",
  "225": "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' ORDER BY molecule_id LIMIT 5;",
  "226": "SELECT ROUND( CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(bond_id), 5 ) AS double_bond_percentage FROM bond WHERE molecule_id = 'TR008';",
  "227": "SELECT ROUND( CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(molecule_id), 3 ) AS percent FROM molecule;",
  "228": "SELECT ROUND( CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(atom_id), 4 ) AS percent FROM atom WHERE molecule_id = 'TR206';",
  "229": "SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR000';",
  "230": "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR060';",
  "231": "SELECT b.bond_type, m.label AS is_carcinogenic FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR010' GROUP BY b.bond_type ORDER BY COUNT(b.bond_type) DESC LIMIT 1;",
  "232": "SELECT DISTINCT m.molecule_id FROM molecule m INNER JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY m.molecule_id LIMIT 3;",
  "233": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;",
  "234": "SELECT COUNT(DISTINCT T1.bond_id) AS bond_count FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR009' AND (T1.atom_id = 'TR009_12' OR T1.atom_id2 = 'TR009_12');",
  "235": "SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';",
  "236": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9';",
  "237": "SELECT molecule.molecule_id, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10';",
  "238": "SELECT COUNT(DISTINCT molecule_id) AS triple_bond_molecules FROM bond WHERE bond_type = '#';",
  "239": "SELECT COUNT(DISTINCT T2.bond_id) AS connection_count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.atom_id LIKE 'TR%_19';",
  "240": "SELECT element FROM atom WHERE molecule_id = 'TR004';",
  "241": "SELECT COUNT(*) AS non_carcinogenic_count FROM molecule WHERE label = '-';",
  "242": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND CAST(SUBSTR(T1.atom_id, 7, 2) AS INTEGER) BETWEEN 21 AND 25;",
  "243": "SELECT c.bond_id FROM connected c INNER JOIN atom a1 ON c.atom_id = a1.atom_id INNER JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');",
  "244": "SELECT M.label FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '=' GROUP BY B.molecule_id ORDER BY COUNT(B.bond_id) DESC LIMIT 1;",
  "245": "-- SQL query to calculate the average number of bonds for atoms with element = 'i' SELECT CAST(COUNT(DISTINCT c.bond_id) AS REAL) / COUNT(DISTINCT a.atom_id) AS average_bonds FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'i';",
  "246": "SELECT bond.bond_type, connected.bond_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE CAST(SUBSTR(atom.atom_id, 7, 2) AS INTEGER) = 45;",
  "247": "SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected );",
  "248": "SELECT DISTINCT c.atom_id, c.atom_id2 FROM molecule m INNER JOIN bond b ON m.molecule_id = b.molecule_id INNER JOIN connected c ON b.bond_id = c.bond_id WHERE m.molecule_id = 'TR041' AND b.bond_type = '#';",
  "249": "SELECT T1.element AS atom1_element, T2.element AS atom2_element FROM connected AS C INNER JOIN atom AS T1 ON C.atom_id = T1.atom_id INNER JOIN atom AS T2 ON C.atom_id2 = T2.atom_id WHERE C.bond_id = 'TR144_8_19';",
  "250": "SELECT m.molecule_id FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;",
  "251": "SELECT a.element FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(a.element) ASC LIMIT 1;",
  "252": "SELECT DISTINCT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb';",
  "253": "-- SQL query to list elements of all triple bonds SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#' UNION SELECT DISTINCT T5.element FROM bond AS T4 INNER JOIN connected AS T6 ON T4.bond_id = T6.bond_id INNER JOIN atom AS T5 ON T6.atom_id2 = T5.atom_id WHERE T4.bond_type = '#';",
  "254": "-- SQL query to calculate the percentage of bonds with the most common combination of atoms' elements WITH ElementCombinations AS ( SELECT a.element AS element1, a2.element AS element2, COUNT(b.bond_id) AS bond_count FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id GROUP BY a.element, a2.element ), MostCommonCombination AS ( SELECT element1, element2, bond_count FROM ElementCombinations WHERE bond_count = (SELECT MAX(bond_count) FROM ElementCombinations) ), TotalBonds AS ( SELECT COUNT(*) AS total_bonds FROM bond ) SELECT (mcc.bond_count * 100.0 / tb.total_bonds) AS percentage FROM MostCommonCombination mcc, TotalBonds tb;",
  "255": "SELECT ROUND( CAST(SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(B.bond_id), 5 ) AS proportion FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-';",
  "256": "SELECT COUNT(atom_id) AS total_atoms FROM atom WHERE element IN ('c', 'h');",
  "257": "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's';",
  "258": "SELECT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'sn';",
  "259": "SELECT COUNT(DISTINCT element) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' );",
  "260": "SELECT COUNT(DISTINCT atom.atom_id) AS total_atoms FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');",
  "261": "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
  "262": "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';",
  "263": "SELECT CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(a.atom_id) AS percent FROM bond b INNER JOIN connected c ON b.bond_id = c.bond_id INNER JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '-';",
  "264": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
  "265": "SELECT molecule_id FROM molecule WHERE label = '-';",
  "266": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';",
  "267": "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';",
  "268": "SELECT a1.element AS atom1_element, a2.element AS atom2_element FROM bond b INNER JOIN connected c ON b.bond_id = c.bond_id INNER JOIN atom a1 ON c.atom_id = a1.atom_id INNER JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_10_11';",
  "269": "SELECT COUNT(DISTINCT connected.bond_id) AS bond_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE atom.element = 'i';",
  "270": "-- Your SQL query SELECT CASE WHEN SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) > SUM(CASE WHEN m.label = '-' THEN 1 ELSE 0 END) THEN 'Carcinogenic' WHEN SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) < SUM(CASE WHEN m.label = '-' THEN 1 ELSE 0 END) THEN 'Non-Carcinogenic' ELSE 'Equal' -- In case of a tie END AS majority_label FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';",
  "271": "SELECT b.bond_id FROM bond AS b INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a1 ON c.atom_id = a1.atom_id INNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_1_8' AND (a1.element = 'cl' OR a1.element = 'c') AND (a2.element = 'cl' OR a2.element = 'c') GROUP BY b.bond_id HAVING COUNT(DISTINCT a1.element) = 2;",
  "272": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T2.bond_type = '#' AND T3.label = '-' LIMIT 2;",
  "273": "-- Your SQL query SELECT CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(m.molecule_id) AS percentage FROM molecule m INNER JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';",
  "274": "SELECT element FROM atom WHERE molecule_id = 'TR001';",
  "275": "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=';",
  "276": "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
  "277": "-- SQL query to find toxicology elements associated with bond ID TR000_1_2 SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_1_2' UNION SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.bond_id = 'TR000_1_2';",
  "278": "SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_single_bond_molecules FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE m.label = '-' AND b.bond_type = '-';",
  "279": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11';",
  "280": "SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';",
  "281": "SELECT atom.element, COUNT(*) AS count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND SUBSTR(atom.atom_id, 7, 1) = '4' GROUP BY atom.element;",
  "282": "SELECT (CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element)) AS ratio, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006';",
  "283": "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'ca' );",
  "284": "SELECT DISTINCT b.bond_type FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element = 'c';",
  "285": "-- SQL query to find chemical elements forming bond TR001_10_11 SELECT a1.element AS atom1_element, a2.element AS atom2_element FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';",
  "286": "-- SQL query to calculate the percentage of molecules with triple bonds SELECT (CAST(COUNT(DISTINCT CASE WHEN bond.bond_type = '#' THEN bond.molecule_id END) AS REAL) * 100.0) / COUNT(DISTINCT molecule.molecule_id) AS percentage_with_triple_bond FROM bond LEFT JOIN molecule ON bond.molecule_id = molecule.molecule_id;",
  "287": "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(bond_id) AS percentage FROM bond WHERE molecule_id = 'TR047';",
  "288": "SELECT M.label FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.atom_id = 'TR001_1';",
  "289": "SELECT label FROM molecule WHERE molecule_id = 'TR151';",
  "290": "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR151' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');",
  "291": "SELECT COUNT(molecule_id) AS carcinogenic_count FROM molecule WHERE label = '+';",
  "292": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE CAST(SUBSTR(molecule.molecule_id, 3, 3) AS INTEGER) BETWEEN 10 AND 50 AND atom.element = 'c';",
  "293": "SELECT COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
  "294": "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '=';",
  "295": "SELECT COUNT(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';",
  "296": "SELECT b.molecule_id FROM connected AS c INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE c.atom_id = 'TR000_1' AND c.bond_id = 'TR000_1_2';",
  "297": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';",
  "298": "SELECT CAST(SUM(CASE WHEN T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';",
  "299": "SELECT label FROM molecule WHERE molecule_id = 'TR124';",
  "300": "SELECT atom_id FROM atom WHERE molecule_id = 'TR186';",
  "301": "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';",
  "302": "SELECT DISTINCT COALESCE(T2.element, T4.element) AS element FROM connected AS T1 LEFT JOIN atom AS T2 ON T1.atom_id = T2.atom_id LEFT JOIN atom AS T4 ON T1.atom_id2 = T4.atom_id WHERE T1.bond_id = 'TR001_2_4';",
  "303": "SELECT COUNT(*) AS double_bond_count, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR006' AND b.bond_type = '=';",
  "304": "SELECT DISTINCT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+';",
  "305": "SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
  "306": "SELECT b.molecule_id, GROUP_CONCAT(DISTINCT a.element) AS elements FROM bond b INNER JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#' GROUP BY b.molecule_id;",
  "307": "SELECT a1.element AS atom1_element, a2.element AS atom2_element FROM bond AS b INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a1 ON c.atom_id = a1.atom_id INNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR000_2_3';",
  "308": "SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'cl';",
  "309": "SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS bond_type_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;",
  "310": "SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bond, SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_molecules_with_double_bond FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=';",
  "311": "SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 's' ) AND molecule_id NOT IN ( SELECT molecule_id FROM bond WHERE bond_type = '=' );",
  "312": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4';",
  "313": "SELECT COUNT(*) AS atom_count FROM atom WHERE molecule_id = 'TR001';",
  "314": "SELECT COUNT(bond_id) AS single_bond_count FROM bond WHERE bond_type = '-';",
  "315": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+';",
  "316": "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';",
  "317": "SELECT (CAST(SUM(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(molecule.molecule_id) AS percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
  "318": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';",
  "319": "SELECT COUNT(DISTINCT element) FROM ( SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4' UNION SELECT T3.element FROM atom AS T3 INNER JOIN connected AS T4 ON T3.atom_id = T4.atom_id2 WHERE T4.bond_id = 'TR001_3_4' ) AS combined_elements;",
  "320": "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';",
  "321": "SELECT a1.molecule_id FROM atom a1 JOIN atom a2 ON a1.molecule_id = a2.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';",
  "322": "SELECT element FROM atom WHERE atom_id = 'TR000_1';",
  "323": "SELECT label FROM molecule WHERE molecule_id = 'TR000';",
  "324": "-- Calculate the percentage of atoms with single bonds SELECT (CAST(COUNT(DISTINCT T1.atom_id) AS REAL) * 100.0) / (SELECT COUNT(DISTINCT atom_id) FROM atom) AS percentage FROM ( SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-') UNION SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-') ) AS T1;",
  "325": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n';",
  "326": "SELECT DISTINCT atom.molecule_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '=';",
  "327": "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING COUNT(atom.atom_id) > 5;",
  "328": "SELECT DISTINCT a1.element FROM atom AS a1 INNER JOIN connected AS c ON a1.atom_id = c.atom_id INNER JOIN bond AS b ON b.bond_id = c.bond_id WHERE b.bond_type = '=' AND b.molecule_id = 'TR024' UNION SELECT DISTINCT a2.element FROM atom AS a2 INNER JOIN connected AS c ON a2.atom_id = c.atom_id2 INNER JOIN bond AS b ON b.bond_id = c.bond_id WHERE b.bond_type = '=' AND b.molecule_id = 'TR024';",
  "329": "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY COUNT(atom.atom_id) DESC LIMIT 1;",
  "330": "-- SQL query to calculate the percentage of carcinogenic molecules with triple bonded hydrogen atoms SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT a.molecule_id) AS percentage FROM atom AS a INNER JOIN connected AS c ON a.atom_id = c.atom_id INNER JOIN bond AS b ON c.bond_id = b.bond_id INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE a.element = 'h' AND b.bond_type = '#';",
  "331": "SELECT COUNT(molecule_id) AS carcinogenic_molecule_count FROM molecule WHERE label = '+';",
  "332": "SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';",
  "333": "SELECT COUNT(*) AS carbon_count FROM atom WHERE molecule_id = 'TR008' AND element = 'c';",
  "334": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';",
  "335": "SELECT COUNT(DISTINCT b.molecule_id) FROM atom a INNER JOIN connected c ON a.atom_id = c.atom_id INNER JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'o' AND b.bond_type = '=';",
  "336": "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-';",
  "337": "SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR002';",
  "338": "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR012' AND atom.element = 'c' AND bond.bond_type = '=';",
  "339": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';",
  "340": "SELECT name FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
  "341": "SELECT name FROM cards WHERE borderColor = 'borderless' AND id NOT IN ( SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL );",
  "342": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);",
  "343": "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;",
  "344": "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator';",
  "345": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';",
  "346": "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal';",
  "347": "SELECT cards.id, rulings.text, cards.hasContentWarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele' AND cards.hasContentWarning = 1;",
  "348": "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';",
  "349": "SELECT cards.name, cards.artist, cards.isPromo FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.isPromo = 1 GROUP BY cards.id ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;",
  "350": "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29';",
  "351": "SELECT DISTINCT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese';",
  "352": "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT cards.uuid) AS percentage FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid;",
  "353": "SELECT sets.name, sets.totalSetSize FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Italian';",
  "354": "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';",
  "355": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",
  "356": "SELECT COUNT(*) AS infinite_power_count FROM cards WHERE power = '*';",
  "357": "SELECT DISTINCT promoTypes FROM cards WHERE TRIM(name) = 'Duress';",
  "358": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
  "359": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';",
  "360": "SELECT DISTINCT st.language FROM cards c INNER JOIN sets s ON c.setCode = s.code INNER JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Angel of Mercy';",
  "361": "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0;",
  "362": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn';",
  "363": "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1;",
  "364": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';",
  "365": "SELECT type FROM cards WHERE name = 'Benalish Knight';",
  "366": "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight';",
  "367": "SELECT DISTINCT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian';",
  "368": "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) AS REAL) * 100.0 / COUNT(*) AS borderless_percentage FROM cards;",
  "369": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1;",
  "370": "SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';",
  "371": "SELECT CAST(COUNT(CASE WHEN fd.language = 'French' THEN 1 ELSE NULL END) AS REAL) * 100.0 / COUNT(CASE WHEN c.isStorySpotlight = 1 THEN 1 ELSE NULL END) AS percentage FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.isStorySpotlight = 1;",
  "372": "SELECT COUNT(*) FROM cards WHERE CAST(toughness AS INTEGER) = 99;",
  "373": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';",
  "374": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';",
  "375": "SELECT id FROM cards WHERE convertedManaCost = 0;",
  "376": "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%';",
  "377": "SELECT COUNT(*) AS card_count FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';",
  "378": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND hasNonFoil = 1;",
  "379": "SELECT id FROM cards WHERE duelDeck = 'a';",
  "380": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';",
  "381": "SELECT T2.artist FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Chinese Simplified';",
  "382": "SELECT DISTINCT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese';",
  "383": "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';",
  "384": "SELECT DISTINCT legalities.uuid, foreign_data.language FROM legalities INNER JOIN foreign_data ON legalities.uuid = foreign_data.uuid WHERE legalities.format = 'legacy';",
  "385": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';",
  "386": "SELECT COUNT(cards.id) AS card_count, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' GROUP BY legalities.status;",
  "387": "SELECT name, colors FROM cards WHERE setCode = 'OGW';",
  "388": "SELECT cards.name, set_translations.translation, set_translations.language FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5;",
  "389": "SELECT cards.name, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.originalType = 'Creature - Elf';",
  "390": "SELECT DISTINCT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;",
  "391": "SELECT DISTINCT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language IS NOT NULL;",
  "392": "SELECT c.name FROM cards c INNER JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;",
  "393": "SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL;",
  "394": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
  "395": "SELECT COUNT(id) AS card_count FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';",
  "396": "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;",
  "397": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper';",
  "398": "SELECT SUM(CAST(SUBSTR(manaCost, 2, INSTR(manaCost, '}') - 2) AS REAL)) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';",
  "399": "SELECT NULLIF(subtypes, '') AS type FROM cards WHERE availability = 'arena' UNION ALL SELECT NULLIF(supertypes, '') AS type FROM cards WHERE availability = 'arena';",
  "400": "SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish';",
  "401": "SELECT (CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(*) AS percentage FROM cards WHERE frameEffects = 'legendary';",
  "402": "-- Calculate the percentage of Story Spotlight cards that do not have a text box WITH StorySpotlightCards AS ( SELECT id, isStorySpotlight, isTextless FROM cards WHERE isStorySpotlight = 1 ), FilteredCards AS ( SELECT id, isStorySpotlight, isTextless FROM StorySpotlightCards WHERE isTextless = 0 ) SELECT (CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM StorySpotlightCards)) AS percentage, id FROM FilteredCards;",
  "403": "-- SQL query to calculate the percentage of cards in Spanish and list them by name SELECT CAST(COUNT(CASE WHEN fd.language = 'Spanish' THEN fd.uuid ELSE NULL END) AS REAL) * 100.0 / COUNT(fd.uuid) AS percentage, c.name FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid GROUP BY c.name ORDER BY c.name;",
  "404": "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 309;",
  "405": "SELECT COUNT(DISTINCT sets.code) AS brazilian_portuguese_commander_sets FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';",
  "406": "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal';",
  "407": "SELECT cards.subtypes, cards.supertypes FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;",
  "408": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';",
  "409": "SELECT COUNT(DISTINCT cards.uuid) AS card_count FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text = 'This is a triggered mana ability.' AND cards.side IS NULL;",
  "410": "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND cards.availability = 'paper' AND legalities.format = 'pauper' AND legalities.status = 'Legal';",
  "411": "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation';",
  "412": "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French';",
  "413": "SELECT COUNT(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2007-02-01';",
  "414": "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';",
  "415": "SELECT CAST(SUM(CASE WHEN c.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal';",
  "416": "SELECT CAST(SUM(CASE WHEN F.language = 'French' AND (C.power IS NULL OR C.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(CASE WHEN C.power IS NULL OR C.power = '*' THEN 1 END) AS percentage FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.power IS NULL OR C.power = '*';",
  "417": "SELECT CAST(SUM(CASE WHEN sets.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(set_translations.id) AS percentage FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese';",
  "418": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader';",
  "419": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;",
  "420": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;",
  "421": "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3;",
  "422": "SELECT language FROM foreign_data WHERE multiverseid = 149934;",
  "423": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3;",
  "424": "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) * 100.0 / COUNT(CASE WHEN isTextless = 1 THEN 1 END) AS proportion FROM cards;",
  "425": "SELECT number FROM cards WHERE side IS NULL AND subtypes = 'Angel,Wizard';",
  "426": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;",
  "427": "SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC';",
  "428": "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;",
  "429": "SELECT set_translations.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 206;",
  "430": "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2;",
  "431": "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.isForeignOnly = 0 AND sets.isFoilOnly = 1 AND set_translations.language = 'Japanese';",
  "432": "SELECT s.name FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1;",
  "433": "SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified';",
  "434": "SELECT COUNT(DISTINCT s.code) FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.language = 'Japanese' AND (s.mtgoCode IS NULL OR s.mtgoCode = '');",
  "435": "SELECT COUNT(*) AS card_count, id FROM cards WHERE borderColor = 'black';",
  "436": "SELECT COUNT(*) AS card_count FROM cards WHERE frameEffects = 'extendedart' UNION ALL SELECT id FROM cards WHERE frameEffects = 'extendedart';",
  "437": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;",
  "438": "SELECT language FROM set_translations WHERE id = 174;",
  "439": "SELECT name FROM sets WHERE code = 'ALL';",
  "440": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';",
  "441": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';",
  "442": "SELECT DISTINCT baseSetSize, code FROM sets WHERE block = 'Masques' OR block = 'Mirage';",
  "443": "SELECT code FROM sets WHERE type = 'expansion';",
  "444": "SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros';",
  "445": "SELECT foreign_data.language, foreign_data.flavorText, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';",
  "446": "SELECT CAST(SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM cards WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Abyssal Horror');",
  "447": "SELECT code FROM sets WHERE type = 'expansion' OR type = 'commander';",
  "448": "SELECT foreign_data.name AS foreign_name, foreign_data.type AS card_type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan';",
  "449": "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius';",
  "450": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
  "451": "SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';",
  "452": "SELECT name FROM cards WHERE isTextless = 0;",
  "453": "SELECT manaCost FROM cards WHERE name = 'Ancestor`s Chosen';",
  "454": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);",
  "455": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;",
  "456": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer' AND (subtypes IS NOT NULL OR supertypes IS NOT NULL);",
  "457": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle';",
  "458": "SELECT COUNT(DISTINCT artist) AS unique_artists FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';",
  "459": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;",
  "460": "SELECT DISTINCT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';",
  "461": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;",
  "462": "SELECT st.translation FROM cards c INNER JOIN sets s ON c.setCode = s.code INNER JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';",
  "463": "SELECT COUNT(*) AS translation_count FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Angel of Mercy';",
  "464": "SELECT cards.name FROM set_translations INNER JOIN cards ON set_translations.setCode = cards.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
  "465": "SELECT COUNT(*) AS has_korean_version FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Korean';",
  "466": "SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T1.translation = 'Hauptset Zehnte Edition' AND T2.artist = 'Adam Rex';",
  "467": "SELECT sets.baseSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
  "468": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified';",
  "469": "SELECT CASE WHEN T2.mtgoCode IS NOT NULL THEN 1 ELSE 0 END AS appeared_on_mtgo FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy';",
  "470": "SELECT sets.releaseDate FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = \"Ancestor's Chosen\";",
  "471": "SELECT sets.type FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
  "472": "SELECT COUNT(*) AS set_count FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;",
  "473": "SELECT sets.isForeignOnly FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Adarkar Valkyrie';",
  "474": "SELECT COUNT(DISTINCT sets.code) FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 100;",
  "475": "SELECT COUNT(cards.id) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';",
  "476": "SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost = ( SELECT MAX(cards.convertedManaCost) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' );",
  "477": "SELECT cards.artist FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
  "478": "SELECT cards.name FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE sets.name = 'Coldsnap' AND cards.number = 4;",
  "479": "SELECT COUNT(T2.id) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Coldsnap' AND T2.convertedManaCost > 5 AND (T2.power IS NULL OR T2.power = '*');",
  "480": "SELECT foreign_data.flavorText FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';",
  "481": "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavorText IS NOT NULL;",
  "482": "SELECT fd.type FROM cards AS c INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';",
  "483": "SELECT fd.text FROM sets AS s INNER JOIN cards AS c ON s.code = c.setCode INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE s.name = 'Coldsnap' AND fd.language = 'Italian';",
  "484": "SELECT fd.name AS italian_name FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid INNER JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) );",
  "485": "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';",
  "486": "SELECT CAST(SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM cards c INNER JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';",
  "487": "SELECT (COUNT(CASE WHEN c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL THEN 1 END) * 100.0) / COUNT(*) AS percentage_incredibly_powerful FROM cards c INNER JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';",
  "488": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';",
  "489": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';",
  "490": "SELECT mcmId FROM sets WHERE code = 'SS2';",
  "491": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';",
  "492": "SELECT type FROM sets WHERE name = 'From the Vault: Lore';",
  "493": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';",
  "494": "SELECT r.text AS ruling_text, CASE WHEN c.hasContentWarning = 1 THEN 'Has Missing or Degraded Properties' ELSE 'No Missing or Degraded Properties' END AS content_warning_status FROM cards c INNER JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';",
  "495": "SELECT sets.releaseDate FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Evacuation';",
  "496": "SELECT T2.baseSetSize FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Rinascita di Alara';",
  "497": "SELECT sets.type FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition';",
  "498": "SELECT st.translation FROM cards c INNER JOIN sets s ON c.setCode = s.code INNER JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';",
  "499": "SELECT COUNT(T2.translation) AS translation_count FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL;",
  "500": "SELECT set_translations.translation FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese';",
  "501": "SELECT cards.name FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedManaCost DESC LIMIT 1;",
  "502": "SELECT sets.releaseDate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de fr\u00edo';",
  "503": "SELECT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Samite Pilgrim';",
  "504": "SELECT COUNT(cards.id) AS card_count FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;",
  "505": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified';",
  "506": "SELECT CAST(SUM(CASE WHEN T2.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese';",
  "507": "SELECT CAST(SUM(CASE WHEN sets.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS online_only_percentage FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Portuguese (Brazil)';",
  "508": "SELECT availability FROM cards WHERE isTextless = 1 AND artist = 'Aleksi Briclot';",
  "509": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1;",
  "510": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;",
  "511": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;",
  "512": "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';",
  "513": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;",
  "514": "SELECT cards.name, CAST(REPLACE(cards.manaCost, '{', '') AS REAL) AS manaCost FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duels' ORDER BY manaCost DESC LIMIT 10;",
  "515": "-- Find the oldest mythic card's release date and its legal play formats SELECT c.originalReleaseDate, l.format FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' AND c.originalReleaseDate = ( SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic' );",
  "516": "SELECT COUNT(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Volkan Ba\u01f5a' AND foreign_data.language = 'French';",
  "517": "SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal';",
  "518": "-- Step 1: Identify the play format with the highest number of banned cards WITH banned_counts AS ( SELECT l.format, COUNT(*) AS banned_count FROM legalities l WHERE l.status = 'Banned' GROUP BY l.format ORDER BY banned_count DESC LIMIT 1 ) -- Step 2: Retrieve the names of all cards for the top format SELECT l.format, c.name FROM legalities l INNER JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'Banned' AND l.format = (SELECT format FROM banned_counts);",
  "519": "SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond';",
  "520": "-- SQL query to find the illustrator with the least amount of cards and their formats WITH least_artist AS ( SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1 ) SELECT DISTINCT L.format FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.artist = (SELECT artist FROM least_artist);",
  "521": "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND (cards.hasContentWarning = 1 OR cards.name LIKE '%Wizards of the Coast%');",
  "522": "SELECT DISTINCT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'Banned';",
  "523": "SELECT COUNT(*) / 4.0 AS annual_average_sets, (SELECT language FROM foreign_data GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31';",
  "524": "SELECT artist FROM cards WHERE availability = 'arena' AND borderColor = 'black' GROUP BY artist;",
  "525": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted');",
  "526": "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';",
  "527": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;",
  "528": "SELECT cards.name, legalities.format FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';",
  "529": "-- SQL query to find names of sets with Korean translation but no Japanese translation SELECT DISTINCT s.name FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.language = 'Korean' EXCEPT SELECT DISTINCT s.name FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.language = 'Japanese';",
  "530": "SELECT cards.frameVersion, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';",
  "531": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;",
  "532": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011';",
  "533": "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01';",
  "534": "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;",
  "535": "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
  "536": "SELECT COUNT(*) AS UserCount FROM users WHERE Views > 10 AND CAST(STRFTIME('%Y', CreationDate) AS INTEGER) > 2013;",
  "537": "SELECT COUNT(posts.Id) AS PostCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie';",
  "538": "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';",
  "539": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts';",
  "540": "SELECT p.Title FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;",
  "541": "SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);",
  "542": "SELECT SUM(posts.CommentCount) AS TotalComments FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie';",
  "543": "SELECT p.AnswerCount FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.AnswerCount DESC LIMIT 1;",
  "544": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';",
  "545": "SELECT COUNT(posts.Id) AS RootPostCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;",
  "546": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ClosedDate IS NOT NULL;",
  "547": "SELECT COUNT(*) AS PostCount FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE u.Age > 65 AND p.Score >= 20;",
  "548": "SELECT users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Eliciting priors from experts';",
  "549": "SELECT posts.Body FROM tags INNER JOIN posts ON tags.ExcerptPostId = posts.Id WHERE tags.TagName = 'bayesian';",
  "550": "SELECT Body FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 );",
  "551": "SELECT COUNT(badges.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'csgillespie';",
  "552": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';",
  "553": "SELECT COUNT(*) AS BadgeCount FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie' AND STRFTIME('%Y', b.Date) = '2011';",
  "554": "SELECT u.DisplayName FROM users u INNER JOIN badges b ON u.Id = b.UserId GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1;",
  "555": "SELECT AVG(posts.Score) AS AverageScore FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie';",
  "556": "SELECT CAST(COUNT(badges.Id) AS REAL) / COUNT(DISTINCT users.Id) AS AverageBadges FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Views > 200;",
  "557": "SELECT CAST(SUM(CASE WHEN users.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS ElderUserPercentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score > 5;",
  "558": "SELECT COUNT(Id) AS vote_count FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
  "559": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;",
  "560": "SELECT COUNT(Id) AS Revival_Badge_Count FROM badges WHERE Name = 'Revival';",
  "561": "SELECT posts.Title FROM comments INNER JOIN posts ON comments.PostId = posts.Id ORDER BY comments.Score DESC LIMIT 1;",
  "562": "SELECT COUNT(comments.Id) AS CommentCount FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount = 1910;",
  "563": "SELECT posts.FavoriteCount FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0';",
  "564": "SELECT comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.ParentId = 107829 AND posts.CommentCount = 1 LIMIT 1;",
  "565": "SELECT CASE WHEN T2.ClosedDate IS NULL THEN 'not well-finished' ELSE 'well-finished' END AS status FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0';",
  "566": "SELECT users.Reputation FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 65041;",
  "567": "SELECT COUNT(posts.Id) AS PostCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Tiago Pasqualini';",
  "568": "SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.Id = 6347;",
  "569": "SELECT COUNT(votes.Id) AS VoteCount FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE posts.Title LIKE '%data visualization%';",
  "570": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
  "571": "SELECT CAST((SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) AS REAL) / (SELECT COUNT(Id) FROM votes WHERE UserId = 24) AS PostToVoteRatio;",
  "572": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
  "573": "SELECT Text FROM comments WHERE Score = 17;",
  "574": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';",
  "575": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';",
  "576": "SELECT DISTINCT u.DisplayName FROM comments c INNER JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';",
  "577": "SELECT comments.Text FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';",
  "578": "SELECT users.DisplayName, users.Reputation FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE LOWER(posts.Title) = 'understanding what dassault isight is doing?';",
  "579": "SELECT comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?';",
  "580": "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10;",
  "581": "SELECT LastEditorDisplayName FROM posts WHERE UPPER(Title) = UPPER('Open source tools for visualizing multi-dimensional data');",
  "582": "SELECT posts.Title FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Vebjorn Ljosa';",
  "583": "SELECT COALESCE(SUM(posts.Score), 0) AS TotalScore, users.WebsiteUrl FROM users JOIN posts ON users.Id = posts.LastEditorUserId WHERE users.DisplayName = 'Yevgeny';",
  "584": "SELECT c.* FROM comments c JOIN postHistory ph ON c.UserId = ph.UserId JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';",
  "585": "SELECT SUM(v.BountyAmount) FROM posts p INNER JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%';",
  "586": "SELECT u.DisplayName FROM posts p INNER JOIN votes v ON p.Id = v.PostId INNER JOIN users u ON v.UserId = u.Id WHERE p.Title LIKE '%variance%' AND v.BountyAmount = 50;",
  "587": "SELECT AVG(posts.ViewCount) AS AverageViewCount, posts.Title, comments.Text FROM posts INNER JOIN tags ON posts.Tags = tags.TagName LEFT JOIN comments ON posts.Id = comments.PostId WHERE tags.TagName = 'humor' GROUP BY posts.Title, comments.Text;",
  "588": "SELECT COUNT(Id) FROM comments WHERE UserId = 13;",
  "589": "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
  "590": "SELECT Id FROM users ORDER BY Views ASC LIMIT 1;",
  "591": "SELECT COUNT(DISTINCT UserId) AS SupporterUsers FROM badges WHERE Name = 'Supporter' AND Date LIKE '2011%';",
  "592": "SELECT COUNT(UserId) FROM ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5 ) AS filtered_users;",
  "593": "SELECT COUNT(DISTINCT T1.Id) AS UserCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId INNER JOIN badges AS T3 ON T1.Id = T3.UserId WHERE T2.Name = 'Supporter' AND T3.Name = 'Teacher' AND T1.Location = 'New York';",
  "594": "SELECT users.DisplayName, users.Reputation FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 1;",
  "595": "SELECT uh.UserId FROM postHistory uh INNER JOIN users u ON uh.UserId = u.Id GROUP BY uh.UserId, uh.PostId HAVING COUNT(uh.PostId) = 1 AND u.Views >= 1000;",
  "596": "-- SQL query to find the user with the most comments and their badges SELECT b.Name AS BadgeName FROM badges b WHERE b.UserId = ( SELECT c.UserId FROM comments c GROUP BY c.UserId ORDER BY COUNT(c.Id) DESC LIMIT 1 );",
  "597": "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'India' AND B.Name = 'Teacher';",
  "598": "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', Date) = '2010' THEN 1 END) AS REAL) * 100.0 / COUNT(*) - CAST(COUNT(CASE WHEN STRFTIME('%Y', Date) = '2011' THEN 1 END) AS REAL) * 100.0 / COUNT(*) AS PercentDifference FROM badges WHERE Name = 'Student';",
  "599": "SELECT ph.PostHistoryTypeId, (SELECT COUNT(DISTINCT c.UserId) FROM comments c WHERE c.PostId = 3720) AS UniqueCommenters FROM postHistory ph WHERE ph.PostId = 3720;",
  "600": "SELECT postLinks.RelatedPostId, posts.ViewCount FROM postLinks INNER JOIN posts ON postLinks.RelatedPostId = posts.Id WHERE postLinks.PostId = 61217;",
  "601": "SELECT posts.Score, postLinks.LinkTypeId FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;",
  "602": "SELECT Id, OwnerUserId FROM posts WHERE Score > 60;",
  "603": "SELECT SUM(FavoriteCount) AS TotalFavorites FROM posts WHERE OwnerUserId = 686 AND STRFTIME('%Y', CreaionDate) = '2011';",
  "604": "SELECT CAST(SUM(users.UpVotes) AS REAL) / COUNT(users.Id) AS AverageUpVotes, CAST(SUM(users.Age) AS REAL) / COUNT(users.Id) AS AverageAge FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.Id) > 10;",
  "605": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';",
  "606": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0';",
  "607": "SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60;",
  "608": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';",
  "609": "SELECT COUNT(Id) AS NumberOfPosts FROM posts WHERE Score = 10;",
  "610": "SELECT B.Name FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.Reputation = (SELECT MAX(Reputation) FROM users);",
  "611": "SELECT users.Reputation FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0';",
  "612": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';",
  "613": "SELECT badges.Date FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Rochester, NY';",
  "614": "SELECT (CAST(COUNT(DISTINCT CASE WHEN b.Name = 'Teacher' THEN b.UserId END) AS REAL) * 100.0) / COUNT(DISTINCT b.UserId) AS TeacherBadgePercentage FROM badges b;",
  "615": "SELECT (CAST(COUNT(CASE WHEN users.Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100.0) / COUNT(users.Id) AS Percentage FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer';",
  "616": "SELECT comments.Score FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.CreaionDate = '2010-07-19 19:19:56.0';",
  "617": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.CreaionDate = '2010-07-19 19:37:33.0';",
  "618": "SELECT DISTINCT users.Age FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria';",
  "619": "SELECT COUNT(DISTINCT u.Id) AS AdultSupporterCount FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;",
  "620": "SELECT users.Views FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0';",
  "621": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users);",
  "622": "SELECT badges.Name FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Sharpie';",
  "623": "SELECT COUNT(DISTINCT badges.UserId) AS ElderCount FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;",
  "624": "SELECT DisplayName FROM users WHERE Id = 30;",
  "625": "SELECT COUNT(Id) AS NumberOfUsers FROM users WHERE Location = 'New York';",
  "626": "SELECT COUNT(*) AS vote_count FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
  "627": "SELECT COUNT(Id) AS AdultUserCount FROM users WHERE Age BETWEEN 19 AND 65;",
  "628": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);",
  "629": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) AS ratio FROM votes;",
  "630": "SELECT DISTINCT T2.TagName FROM posts AS T1 INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T3.DisplayName = 'John Salvatier';",
  "631": "SELECT COUNT(posts.Id) AS PostCount FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';",
  "632": "SELECT COUNT(votes.Id) AS VoteCount FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'Harlan';",
  "633": "SELECT posts.Id FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1;",
  "634": "SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViewCount FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName ORDER BY TotalViewCount DESC LIMIT 1;",
  "635": "SELECT COUNT(P.Id) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Matt Parker' AND P.Score > 4;",
  "636": "SELECT COUNT(*) AS NegativeCommentCount FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';",
  "637": "SELECT posts.Tags FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Mark Meckes' AND posts.CommentCount = 0;",
  "638": "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';",
  "639": "SELECT CAST(SUM(CASE WHEN T1.Tags LIKE '%<r>%' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(T1.Id) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community';",
  "640": "SELECT SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id;",
  "641": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';",
  "642": "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';",
  "643": "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);",
  "644": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';",
  "645": "SELECT COUNT(*) AS NegativeCommentCount FROM comments WHERE Score < 60 AND UserId = 13;",
  "646": "SELECT posts.Title, comments.UserDisplayName FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.Score > 60;",
  "647": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'North Pole' AND STRFTIME('%Y', badges.Date) = '2011';",
  "648": "SELECT users.DisplayName, users.WebsiteUrl FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;",
  "649": "SELECT COUNT(postHistory.Id) AS HistoryCount, posts.LastEditDate FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId WHERE posts.Title = 'What is the best introductory Bayesian statistics textbook?';",
  "650": "SELECT users.LastAccessDate, users.Location FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'outliers';",
  "651": "SELECT p2.Title AS RelatedPostTitle FROM posts AS p1 INNER JOIN postLinks AS pl ON p1.Id = pl.PostId INNER JOIN posts AS p2 ON pl.RelatedPostId = p2.Id WHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';",
  "652": "SELECT posts.Id AS PostId, badges.Name AS BadgeName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id INNER JOIN badges ON users.Id = badges.UserId WHERE STRFTIME('%Y', posts.CreaionDate) = '2013' AND STRFTIME('%Y', badges.Date) = '2013' AND posts.OwnerDisplayName = 'Samuel';",
  "653": "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);",
  "654": "SELECT users.DisplayName, users.Location FROM tags INNER JOIN posts ON tags.ExcerptPostId = posts.Id INNER JOIN users ON posts.OwnerUserId = users.Id WHERE tags.TagName = 'hypothesis-testing';",
  "655": "SELECT p.Title, pl.LinkTypeId FROM postLinks AS pl INNER JOIN posts AS p ON pl.RelatedPostId = p.Id WHERE pl.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?');",
  "656": "-- Your SQL query SELECT OwnerDisplayName FROM posts WHERE Id = ( SELECT ParentId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 );",
  "657": "-- Your SQL query SELECT users.DisplayName, users.WebsiteUrl FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = ( SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8 );",
  "658": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;",
  "659": "SELECT COUNT(*) AS TagCount FROM tags WHERE Count BETWEEN 5000 AND 7000;",
  "660": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);",
  "661": "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
  "662": "SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE STRFTIME('%Y', T1.CreationDate) = '2011' AND T2.BountyAmount = 50;",
  "663": "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);",
  "664": "SELECT SUM(Score) AS TotalScore FROM posts WHERE DATE(LasActivityDate) = '2010-07-19';",
  "665": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 AS AverageMonthlyLinks FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2;",
  "666": "SELECT posts.Id FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE votes.UserId = 1465 ORDER BY posts.FavoriteCount DESC LIMIT 1;",
  "667": "SELECT DISTINCT p.Title FROM posts p INNER JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
  "668": "SELECT u.DisplayName FROM users u INNER JOIN badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ORDER BY COUNT(b.Name) DESC LIMIT 1;",
  "669": "SELECT MIN(votes.CreationDate) AS FirstVoteDate FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.DisplayName = 'chl';",
  "670": "SELECT MIN(posts.CreaionDate) AS FirstPostDate FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Age = (SELECT MIN(Age) FROM users);",
  "671": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;",
  "672": "SELECT COUNT(DISTINCT users.Id) AS UserCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Location = 'United Kingdom' GROUP BY users.Id HAVING SUM(posts.FavoriteCount) >= 4;",
  "673": "SELECT AVG(vote_count) AS avg_posts_voted FROM ( SELECT COUNT(v.PostId) AS vote_count FROM votes v INNER JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users) GROUP BY v.UserId ) subquery;",
  "674": "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1;",
  "675": "SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000;",
  "676": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;",
  "677": "SELECT COUNT(p.Id) AS PostCount FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', p.CreaionDate) = '2010';",
  "678": "SELECT posts.Id, posts.Title FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;",
  "679": "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);",
  "680": "SELECT AVG(posts.Score) AS AverageScore FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner';",
  "681": "SELECT DISTINCT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE strftime('%Y', posts.CreationDate) = '2011' AND posts.ViewCount > 20000;",
  "682": "SELECT p.Id, u.DisplayName AS OwnerDisplayName FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE STRFTIME('%Y', p.CreaionDate) = '2010' ORDER BY p.FavoriteCount DESC LIMIT 1;",
  "683": "SELECT (CAST(COUNT(CASE WHEN U.Reputation > 1000 THEN 1 ELSE NULL END) AS REAL) * 100.0) / COUNT(P.Id) AS percentage FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE STRFTIME('%Y', P.CreationDate) = '2011';",
  "684": "SELECT CAST(SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(Id) AS percentage FROM users;",
  "685": "SELECT p.ViewCount, u.DisplayName FROM posts p INNER JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets';",
  "686": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);",
  "687": "SELECT COUNT(comments.Id) AS CommentCount FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts);",
  "688": "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;",
  "689": "SELECT u.DisplayName, u.Location FROM posts p INNER JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1;",
  "690": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1;",
  "691": "SELECT COUNT(Id) FROM users WHERE UpVotes > 5000 AND Age BETWEEN 19 AND 65;",
  "692": "SELECT julianday(badges.Date) - julianday(users.CreationDate) AS DaysToBadge FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Zolomon';",
  "693": "SELECT COUNT(DISTINCT posts.Id) AS PostCount, COUNT(DISTINCT comments.Id) AS CommentCount FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON users.Id = comments.UserId WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users);",
  "694": "SELECT comments.Text, comments.UserDisplayName FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Analysing wind data with R' ORDER BY comments.CreationDate DESC LIMIT 10;",
  "695": "SELECT COUNT(UserId) FROM badges WHERE Name = 'Citizen Patrol';",
  "696": "SELECT COUNT(*) AS PostCount FROM posts WHERE Tags LIKE '%<careers>%';",
  "697": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';",
  "698": "-- SQL query to count comments and answers for the post titled 'Clustering 1D data' SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE PostTypeId = 2 AND ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS AnswerCount;",
  "699": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';",
  "700": "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30;",
  "701": "-- SQL query to calculate the percentage of posts with a score above 50 SELECT CAST(SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(p.Id) AS Percentage FROM posts p WHERE p.OwnerUserId = ( SELECT u.Id FROM users u ORDER BY u.Reputation DESC LIMIT 1 );",
  "702": "SELECT COUNT(*) AS post_count FROM posts WHERE Score < 20;",
  "703": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;",
  "704": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",
  "705": "SELECT users.Reputation, users.UpVotes FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'fine, you win :)';",
  "706": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title LIKE '%linear regression%';",
  "707": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount BETWEEN 100 AND 150 ORDER BY comments.Score DESC LIMIT 1;",
  "708": "SELECT DISTINCT users.CreationDate, users.Age FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.WebsiteUrl LIKE '%http://%';",
  "709": "SELECT COUNT(DISTINCT posts.Id) AS PostCount FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount < 5 AND comments.Score = 0;",
  "710": "SELECT COUNT(c.Id) AS CommentCount FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;",
  "711": "SELECT COUNT(DISTINCT T2.UserId) AS TotalUsers FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score = 0 AND T1.Age = 40;",
  "712": "SELECT posts.Id AS PostId, comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';",
  "713": "SELECT users.UpVotes FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'R is also lazy evaluated.';",
  "714": "SELECT comments.Text FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.DisplayName = 'Harvey Motulsky';",
  "715": "SELECT DISTINCT users.DisplayName FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.DownVotes = 0 AND comments.Score BETWEEN 1 AND 5;",
  "716": "SELECT CAST(SUM(CASE WHEN users.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(users.Id) AS Percentage FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 5 AND 10;",
  "717": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';",
  "718": "SELECT COUNT(hero_id) FROM hero_power WHERE power_id = ( SELECT id FROM superpower WHERE power_name = 'Super Strength' );",
  "719": "SELECT COUNT(DISTINCT hero_power.hero_id) AS tall_heroes_with_super_strength FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
  "720": "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;",
  "721": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
  "722": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';",
  "723": "SELECT COUNT(DISTINCT superhero.id) AS blueeyed_agility_heroes FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
  "724": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');",
  "725": "SELECT COUNT(superhero.id) AS superhero_count FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
  "726": "SELECT superhero.superhero_name, superhero.height_cm FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC;",
  "727": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';",
  "728": "SELECT colour.colour, COUNT(superhero.id) AS superhero_count FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour ORDER BY superhero_count DESC;",
  "729": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';",
  "730": "SELECT s.superhero_name FROM superhero AS s INNER JOIN publisher AS p ON s.publisher_id = p.id INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';",
  "731": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';",
  "732": "SELECT p.publisher_name FROM publisher p INNER JOIN superhero s ON p.id = s.publisher_id INNER JOIN hero_attribute ha ON s.id = ha.hero_id INNER JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = ( SELECT MIN(ha2.attribute_value) FROM hero_attribute ha2 INNER JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Speed' );",
  "733": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';",
  "734": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';",
  "735": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';",
  "736": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;",
  "737": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';",
  "738": "SELECT superhero.superhero_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;",
  "739": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';",
  "740": "SELECT COUNT(s.id) AS female_strength_100_count FROM superhero AS s INNER JOIN gender AS g ON s.gender_id = g.id INNER JOIN hero_attribute AS ha ON s.id = ha.hero_id INNER JOIN attribute AS a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;",
  "741": "SELECT superhero.superhero_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id GROUP BY superhero.id ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;",
  "742": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';",
  "743": "SELECT -- Percentage of superheroes with alignment = 'Bad' (100.0 * SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) / COUNT(s.id)) AS bad_alignment_percentage, -- Count of superheroes with alignment = 'Bad' published by Marvel Comics SUM(CASE WHEN p.publisher_name = 'Marvel Comics' AND a.alignment = 'Bad' THEN 1 ELSE 0 END) AS bad_alignment_marvel_count FROM superhero s INNER JOIN alignment a ON s.alignment_id = a.id INNER JOIN publisher p ON s.publisher_id = p.id;",
  "744": "-- Your SQL query SELECT COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) - COUNT(CASE WHEN p.publisher_name = 'DC Comics' THEN s.id ELSE NULL END) AS difference FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE p.publisher_name IN ('Marvel Comics', 'DC Comics');",
  "745": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
  "746": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;",
  "747": "SELECT COUNT(*) AS total_superheroes_without_full_name FROM superhero WHERE full_name IS NULL;",
  "748": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;",
  "749": "SELECT superpower.power_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';",
  "750": "SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';",
  "751": "SELECT sp.power_name FROM superhero AS s INNER JOIN gender AS g ON s.gender_id = g.id INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;",
  "752": "SELECT superhero.superhero_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien';",
  "753": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'No Colour' AND superhero.height_cm BETWEEN 170 AND 190;",
  "754": "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;",
  "755": "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;",
  "756": "SELECT COUNT(*) AS bad_superhero_count FROM superhero AS s INNER JOIN alignment AS a ON s.alignment_id = a.id WHERE a.alignment = 'Bad';",
  "757": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;",
  "758": "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185;",
  "759": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero);",
  "760": "SELECT CAST(SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM superhero AS H INNER JOIN publisher AS P ON H.publisher_id = P.id WHERE H.height_cm BETWEEN 150 AND 180;",
  "761": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);",
  "762": "SELECT sp.power_name FROM superpower AS sp INNER JOIN hero_power AS hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;",
  "763": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination';",
  "764": "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1;",
  "765": "SELECT COUNT(DISTINCT hp.hero_id) AS stealth_hero_count FROM superpower AS sp INNER JOIN hero_power AS hp ON sp.id = hp.power_id WHERE sp.power_name = 'Stealth';",
  "766": "SELECT s.full_name FROM superhero s INNER JOIN hero_attribute ha ON s.id = ha.hero_id INNER JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1;",
  "767": "-- Calculate the average of superheroes with no skin colour SELECT CAST(COUNT(superhero.id) AS REAL) / SUM(CASE WHEN colour.colour = 'No Colour' THEN 1 ELSE 0 END) AS average FROM superhero LEFT JOIN colour ON superhero.skin_colour_id = colour.id;",
  "768": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';",
  "769": "SELECT s.superhero_name FROM superhero AS s INNER JOIN publisher AS p ON s.publisher_id = p.id INNER JOIN hero_attribute AS ha ON s.id = ha.hero_id INNER JOIN attribute AS a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND p.publisher_name = 'Dark Horse Comics' AND ha.attribute_value = ( SELECT MAX(ha2.attribute_value) FROM superhero AS s2 INNER JOIN hero_attribute AS ha2 ON s2.id = ha2.hero_id INNER JOIN attribute AS a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Durability' AND s2.publisher_id = p.id );",
  "770": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';",
  "771": "SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Flight';",
  "772": "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';",
  "773": "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.eye_colour_id AND superhero.hair_colour_id = superhero.skin_colour_id;",
  "774": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';",
  "775": "SELECT (CAST(COUNT(CASE WHEN c.colour = 'Blue' THEN s.id ELSE NULL END) AS REAL) * 100.0) / COUNT(s.id) AS percentage FROM superhero AS s INNER JOIN colour AS c ON s.skin_colour_id = c.id INNER JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Female';",
  "776": "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';",
  "777": "SELECT gender.gender FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id WHERE superhero.superhero_name = 'Agent 13';",
  "778": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';",
  "779": "SELECT COUNT(hero_power.power_id) AS power_count FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';",
  "780": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';",
  "781": "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';",
  "782": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';",
  "783": "SELECT T1.colour AS eye_colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id INNER JOIN colour AS T3 ON T3.id = T2.skin_colour_id WHERE T3.colour = 'Gold';",
  "784": "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';",
  "785": "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';",
  "786": "-- Your SQL query SELECT COUNT(hero_id) FROM hero_attribute AS ha INNER JOIN attribute AS a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute AS ha2 INNER JOIN attribute AS a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'Strength' );",
  "787": "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';",
  "788": "SELECT (CAST(SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(*) AS female_hero_percentage FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
  "789": "SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';",
  "790": "SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS difference FROM superhero;",
  "791": "SELECT superhero_name, height_cm AS average_height FROM superhero;",
  "792": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';",
  "793": "SELECT COUNT(*) AS male_god_eternal_count FROM superhero WHERE gender_id = 1 AND race_id = 21;",
  "794": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;",
  "795": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';",
  "796": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';",
  "797": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Brown';",
  "798": "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
  "799": "SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;",
  "800": "SELECT CAST(SUM(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id;",
  "801": "SELECT CAST(SUM(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS ratio FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;",
  "802": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
  "803": "SELECT id FROM superpower WHERE power_name = 'cryokinesis';",
  "804": "SELECT superhero_name FROM superhero WHERE id = 294;",
  "805": "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;",
  "806": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';",
  "807": "SELECT sp.power_name FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.full_name = 'Helen Parr';",
  "808": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
  "809": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;",
  "810": "SELECT r.race FROM hero_attribute ha INNER JOIN superhero s ON ha.hero_id = s.id INNER JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);",
  "811": "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';",
  "812": "SELECT superhero.full_name FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;",
  "813": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.alignment_id = 3;",
  "814": "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;",
  "815": "SELECT COUNT(superhero.id) AS good_female_count FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE alignment.alignment = 'Good' AND gender.gender = 'Female';",
  "816": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;",
  "817": "SELECT race.race FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'Blue' AND gender.gender = 'Male';",
  "818": "SELECT CAST( COUNT(CASE WHEN gender_id = 2 THEN 1 ELSE NULL END) AS REAL ) * 100.0 / COUNT(*) AS percentage_female FROM superhero WHERE alignment_id = 2;",
  "819": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 LEFT JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;",
  "820": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';",
  "821": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';",
  "822": "SELECT COUNT(*) FROM superhero AS s INNER JOIN colour AS c ON s.skin_colour_id = c.id INNER JOIN alignment AS a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'Bad';",
  "823": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';",
  "824": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;",
  "825": "SELECT g.gender FROM superpower sp INNER JOIN hero_power hp ON sp.id = hp.power_id INNER JOIN superhero s ON hp.hero_id = s.id INNER JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force';",
  "826": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1;",
  "827": "SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race <> 'Human';",
  "828": "SELECT COUNT(hero_attribute.hero_id) FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;",
  "829": "SELECT SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id;",
  "830": "SELECT a.attribute_name FROM hero_attribute ha INNER JOIN attribute a ON ha.attribute_id = a.id WHERE ha.hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Black Panther' ) ORDER BY ha.attribute_value ASC LIMIT 1;",
  "831": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';",
  "832": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
  "833": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';",
  "834": "SELECT CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS female_percentage FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id INNER JOIN gender g ON s.gender_id = g.id WHERE p.publisher_name = 'George Lucas';",
  "835": "-- Your SQL query SELECT (CAST(SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(s.id) AS percentage FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id INNER JOIN alignment a ON s.alignment_id = a.id WHERE p.publisher_name = 'Marvel Comics';",
  "836": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%';",
  "837": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);",
  "838": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';",
  "839": "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown';",
  "840": "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy';",
  "841": "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;",
  "842": "SELECT AVG(T1.height_cm) AS average_height FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral';",
  "843": "SELECT hero_power.hero_id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Intelligence';",
  "844": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';",
  "845": "SELECT sp.power_name FROM superhero AS sh INNER JOIN hero_power AS hp ON sh.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.height_cm > (SELECT AVG(height_cm) FROM superhero) * 0.8;",
  "846": "SELECT d.driverRef FROM qualifying q INNER JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 20 ORDER BY q.q1 DESC LIMIT 5;",
  "847": "SELECT d.surname FROM drivers d INNER JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 19 AND q.q2 = ( SELECT MIN(q2) FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL );",
  "848": "SELECT DISTINCT races.year FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.location = 'Shanghai';",
  "849": "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
  "850": "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Germany';",
  "851": "SELECT DISTINCT circuits.location FROM constructors INNER JOIN results ON constructors.constructorId = results.constructorId INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE constructors.name = 'Renault';",
  "852": "SELECT COUNT(*) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('Asia', 'Europe');",
  "853": "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Spain';",
  "854": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Australian Grand Prix';",
  "855": "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Sepang International Circuit';",
  "856": "SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit';",
  "857": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';",
  "858": "SELECT constructors.nationality FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE constructorResults.raceId = 24 AND constructorResults.points = 1;",
  "859": "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 354 AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna';",
  "860": "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 355 AND qualifying.q2 = '0:01:40';",
  "861": "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 = '0:01:54';",
  "862": "SELECT COUNT(*) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Bahrain Grand Prix' AND T1.year = 2007 AND T2.time IS NULL;",
  "863": "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceId = 901;",
  "864": "SELECT COUNT(DISTINCT results.driverId) FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.date = '2015-11-29' AND results.time IS NOT NULL;",
  "865": "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;",
  "866": "SELECT drivers.url FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = 161 AND lapTimes.time = '1:01:27';",
  "867": "SELECT drivers.nationality FROM drivers WHERE drivers.driverId = ( SELECT results.driverId FROM results WHERE results.raceId = 933 ORDER BY results.fastestLapSpeed DESC LIMIT 1 );",
  "868": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix';",
  "869": "SELECT c.url FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;",
  "870": "SELECT q1 FROM qualifying AS q INNER JOIN drivers AS d ON q.driverId = d.driverId WHERE q.raceId = 345 AND d.forename = 'Lucas' AND d.surname = 'di Grassi';",
  "871": "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 347 AND qualifying.q2 = '0:01:15';",
  "872": "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.raceId = 45 AND qualifying.q3 = '0:01:33';",
  "873": "SELECT results.time FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 743 AND drivers.forename = 'Bruce' AND drivers.surname = 'McLaren';",
  "874": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;",
  "875": "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;",
  "876": "SELECT COUNT(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.time IS NULL;",
  "877": "SELECT d.forename, d.surname FROM drivers d INNER JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;",
  "878": "SELECT d.forename, d.surname FROM lapTimes AS lt INNER JOIN drivers AS d ON lt.driverId = d.driverId WHERE lt.raceId = 348 AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348);",
  "879": "SELECT d.nationality FROM results r INNER JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results );",
  "880": "-- SQL query to calculate the percentage difference in fastest lap speed SELECT (T1.fastestLapSpeed - T2.fastestLapSpeed) * 100.0 / T1.fastestLapSpeed AS percentage_difference FROM results AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 853 AND T2.raceId = 854 AND T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta' );",
  "881": "SELECT CAST(COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) AS REAL) * 100.0 / COUNT(*) AS completion_rate FROM results AS R INNER JOIN races AS RC ON R.raceId = RC.raceId WHERE RC.date = '1983-07-16';",
  "882": "SELECT MIN(year) AS first_singapore_gp_year FROM races WHERE name = 'Singapore Grand Prix';",
  "883": "-- Count the number of races in 2005 and retrieve race names in descending order SELECT COUNT(*) AS race_count FROM races WHERE year = 2005 UNION ALL SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;",
  "884": "SELECT name FROM races WHERE strftime('%Y-%m', date) = ( SELECT strftime('%Y-%m', min(date)) FROM races );",
  "885": "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);",
  "886": "SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
  "887": "SELECT r.name FROM races r WHERE r.year = 2017 AND r.circuitId NOT IN ( SELECT r2.circuitId FROM races r2 WHERE r2.year = 2000 );",
  "888": "SELECT circuits.country, circuits.name AS circuit_name, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name LIKE '%European Grand Prix%' ORDER BY races.year ASC LIMIT 1;",
  "889": "SELECT MAX(races.year) AS last_season FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';",
  "890": "SELECT COUNT(DISTINCT races.year) AS season_count FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix' AND circuits.country = 'United Kingdom';",
  "891": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Singapore Grand Prix' AND races.year = 2010 ORDER BY results.position;",
  "892": "SELECT drivers.forename, drivers.surname, SUM(results.points) AS total_points FROM drivers INNER JOIN results ON drivers.driverId = results.driverId GROUP BY drivers.driverId ORDER BY total_points DESC LIMIT 1;",
  "893": "SELECT drivers.forename, drivers.surname, results.points FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY results.points DESC LIMIT 3;",
  "894": "SELECT d.forename, d.surname, r.name AS race_name, l.milliseconds AS best_lap_time FROM lapTimes l INNER JOIN drivers d ON l.driverId = d.driverId INNER JOIN races r ON l.raceId = r.raceId WHERE l.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);",
  "895": "SELECT AVG(T3.milliseconds) AS average_lap_time FROM drivers AS T1 INNER JOIN laptimes AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.name = 'Malaysian Grand Prix' AND T2.year = 2009;",
  "896": "SELECT CAST(SUM(CASE WHEN rs.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(rs.raceId) AS percentage FROM drivers d INNER JOIN results rs ON d.driverId = rs.driverId INNER JOIN races r ON rs.raceId = r.raceId WHERE d.surname = 'Hamilton' AND r.year >= 2010;",
  "897": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, MAX(ds.points) AS max_points FROM drivers d INNER JOIN driverStandings ds ON d.driverId = ds.driverId GROUP BY d.driverId ORDER BY SUM(ds.wins) DESC LIMIT 1;",
  "898": "SELECT (strftime('%Y', 'now') - strftime('%Y', dob)) AS age, forename || ' ' || surname AS name FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;",
  "899": "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE STRFTIME('%Y', races.date) BETWEEN '1990' AND '2000' GROUP BY circuits.name HAVING COUNT(races.raceId) = 4;",
  "900": "SELECT circuits.name AS circuit_name, circuits.location AS circuit_location, races.name AS race_name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;",
  "901": "SELECT races.name AS race_name, circuits.name AS circuit_name, circuits.location AS circuit_location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%Y', races.date) = '2005' AND strftime('%m', races.date) = '09';",
  "902": "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20;",
  "903": "SELECT COUNT(*) FROM drivers AS d INNER JOIN results AS r ON d.driverId = r.driverId INNER JOIN races AS ra ON r.raceId = ra.raceId INNER JOIN circuits AS c ON ra.circuitId = c.circuitId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND c.name = 'Sepang International Circuit' AND r.position = 1;",
  "904": "SELECT DISTINCT races.name AS race_name, races.year AS race_year FROM laptimes INNER JOIN drivers ON laptimes.driverId = drivers.driverId INNER JOIN races ON laptimes.raceId = races.raceId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY laptimes.milliseconds ASC LIMIT 1;",
  "905": "SELECT AVG(results.points) AS average_points FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;",
  "906": "SELECT r.name AS race_name, ds.points AS points FROM drivers AS d INNER JOIN driverStandings AS ds ON d.driverId = ds.driverId INNER JOIN races AS r ON ds.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC LIMIT 1;",
  "907": "SELECT races.name, circuits.country FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;",
  "908": "SELECT T1.name AS race_name, T1.year, T2.location AS circuit_location, T3.laps AS most_laps FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T1.raceId = T3.raceId WHERE T3.laps = (SELECT MAX(laps) FROM results);",
  "909": "SELECT CAST(SUM(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(races.name) AS percentage FROM races INNER JOIN circuits ON circuits.circuitId = races.circuitId WHERE races.name = 'European Grand Prix';",
  "910": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
  "911": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;",
  "912": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';",
  "913": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;",
  "914": "SELECT COUNT(*) FROM drivers WHERE code IS NULL;",
  "915": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1;",
  "916": "SELECT surname FROM drivers WHERE LOWER(nationality) = LOWER('Italian');",
  "917": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';",
  "918": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
  "919": "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
  "920": "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit';",
  "921": "SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.circuitRef = 'silverstone';",
  "922": "SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit';",
  "923": "SELECT COUNT(*) AS race_count FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';",
  "924": "SELECT races.date FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Barcelona-Catalunya' OR circuits.circuitRef = 'catalunya';",
  "925": "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
  "926": "SELECT MIN(results.fastestLapTime) AS fastest_lap_time FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "927": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId ORDER BY results.fastestLapSpeed DESC LIMIT 1;",
  "928": "SELECT drivers.driverRef FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 AND results.position = 1;",
  "929": "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "930": "SELECT races.name FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;",
  "931": "SELECT MAX(results.fastestLapSpeed) AS fastest_lap_speed FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
  "932": "SELECT DISTINCT r.year FROM drivers AS d INNER JOIN results AS res ON d.driverId = res.driverId INNER JOIN races AS r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
  "933": "SELECT results.positionOrder FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Chinese Grand Prix' AND races.year = 2008;",
  "934": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 1989 AND results.grid = 4 AND races.name = 'Australian Grand Prix';",
  "935": "SELECT COUNT(DISTINCT results.driverId) FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;",
  "936": "SELECT results.fastestLapTime FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "937": "SELECT results.time FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Chinese Grand Prix' AND races.year = 2008 AND results.rank = 2;",
  "938": "SELECT DISTINCT d.forename, d.surname, d.url FROM races AS r INNER JOIN results AS res ON r.raceId = res.raceId INNER JOIN drivers AS d ON res.driverId = d.driverId WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND res.position = 1 AND res.time LIKE '%:%:%.%';",
  "939": "SELECT COUNT(DISTINCT drivers.driverId) AS BritishDriverCount FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId INNER JOIN races ON qualifying.raceId = races.raceId WHERE drivers.nationality = 'British' AND races.year = 2008 AND races.name = 'Australian Grand Prix';",
  "940": "SELECT COUNT(DISTINCT T2.driverId) AS driver_count FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL;",
  "941": "SELECT SUM(results.points) AS total_points FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "942": "SELECT AVG( CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1, INSTR(T2.fastestLapTime, '.') - INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, '.') + 1) AS REAL) / 1000 ) AS average_fastest_lap_time_seconds FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';",
  "943": "SELECT CAST(SUM(CASE WHEN time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS completion_rate FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');",
  "944": "SELECT (MAX(T2.time) - MIN(T2.time)) * 100.0 / MAX(T2.time) AS percentage_difference FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL;",
  "945": "SELECT COUNT(circuitId) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide';",
  "946": "SELECT lat, lng FROM circuits WHERE country = 'USA';",
  "947": "SELECT COUNT(*) AS British_Driver_Count FROM drivers WHERE STRFTIME('%Y', dob) > '1980' AND nationality = 'British';",
  "948": "SELECT MAX(T2.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'British';",
  "949": "SELECT c.name FROM constructors AS c INNER JOIN constructorStandings AS cs ON c.constructorId = cs.constructorId GROUP BY c.name ORDER BY SUM(cs.points) DESC LIMIT 1;",
  "950": "SELECT constructors.name FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.raceId = 291 AND constructorStandings.points = 0;",
  "951": "SELECT COUNT(DISTINCT constructors.constructorId) AS japanese_constructors_with_0_points_in_2_races FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'Japanese' GROUP BY constructors.constructorId HAVING COUNT(constructorStandings.raceId) = 2 AND SUM(constructorStandings.points) = 0;",
  "952": "SELECT constructors.name FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;",
  "953": "SELECT COUNT(DISTINCT constructors.constructorId) FROM constructors INNER JOIN results ON constructors.constructorId = results.constructorId WHERE constructors.nationality = 'French' AND results.laps > 50;",
  "954": "SELECT CAST(COUNT(CASE WHEN T3.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100.0 / COUNT(T1.driverId) AS race_completion_percentage FROM drivers AS T1 INNER JOIN results AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T2.year BETWEEN 2007 AND 2009 AND T1.nationality = 'Japanese';",
  "955": "SELECT r.year, AVG( CAST( SUBSTR(res.time, 1, 2) AS INTEGER) * 3600 + CAST( SUBSTR(res.time, 4, 2) AS INTEGER) * 60 + CAST( SUBSTR(res.time, 7, 2) AS INTEGER) + CAST( SUBSTR(res.time, 10, 3) AS REAL) / 1000 ) AS average_time_seconds FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId INNER JOIN status AS s ON res.statusId = s.statusId WHERE r.year < 1975 AND s.status = 'Finished' GROUP BY r.year;",
  "956": "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE SUBSTR(drivers.dob, 1, 4) > '1975' AND results.rank = 2;",
  "957": "SELECT COUNT(DISTINCT drivers.driverId) AS italian_drivers_not_finished FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
  "958": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);",
  "959": "SELECT results.fastestLap FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND results.position = 1;",
  "960": "SELECT AVG(CAST(T2.fastestLapSpeed AS REAL)) AS average_fastest_lap_speed FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
  "961": "SELECT r.name, r.year FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;",
  "962": "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', d.dob) < '1985' AND r.laps > 50 THEN 1 ELSE NULL END) AS REAL) * 100.0 / COUNT(d.driverId) AS percentage FROM drivers d INNER JOIN results r ON d.driverId = r.driverId INNER JOIN races c ON r.raceId = c.raceId WHERE c.year BETWEEN 2000 AND 2005;",
  "963": "SELECT COUNT(DISTINCT drivers.driverId) AS FrenchDriversCount FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.milliseconds < 120000;",
  "964": "SELECT code FROM drivers WHERE nationality = 'America';",
  "965": "SELECT raceId FROM races WHERE year = 2009;",
  "966": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;",
  "967": "SELECT code, COUNT(CASE WHEN nationality = 'Netherlands' THEN 1 ELSE NULL END) AS netherlands_count FROM (SELECT code, nationality FROM drivers ORDER BY dob DESC LIMIT 3) GROUP BY code;",
  "968": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
  "969": "SELECT COUNT(*) FROM drivers WHERE STRFTIME('%Y', dob) = '1980' AND nationality = 'British';",
  "970": "SELECT drivers.forename, drivers.surname, MIN(lapTimes.time) AS earliest_lap_time FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'German' AND STRFTIME('%Y', drivers.dob) BETWEEN '1980' AND '1990' GROUP BY drivers.driverId ORDER BY earliest_lap_time ASC LIMIT 3;",
  "971": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
  "972": "SELECT DISTINCT drivers.driverId, drivers.code FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE STRFTIME('%Y', drivers.dob) = '1971' AND results.fastestLapTime IS NOT NULL;",
  "973": "-- SQL query to find top 10 Spanish drivers born before 1982 with the latest lap time SELECT D.driverId, D.forename, D.surname, MAX(LT.time) AS latest_lap_time FROM drivers AS D INNER JOIN lapTimes AS LT ON D.driverId = LT.driverId WHERE D.nationality = 'Spanish' AND STRFTIME('%Y', D.dob) < '1982' GROUP BY D.driverId ORDER BY latest_lap_time DESC LIMIT 10;",
  "974": "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.fastestLapTime IS NOT NULL;",
  "975": "SELECT r.year FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId ORDER BY lt.milliseconds DESC LIMIT 1;",
  "976": "SELECT driverId FROM laptimes WHERE lap = 1 ORDER BY time ASC LIMIT 5;",
  "977": "SELECT COUNT(*) FROM results WHERE raceId >= 50 AND raceId <= 100 AND statusId = 2 AND time IS NOT NULL;",
  "978": "SELECT circuits.name AS circuit_name, circuits.lat AS latitude, circuits.lng AS longitude, COUNT(races.raceId) AS race_count FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Austria' GROUP BY circuits.name, circuits.lat, circuits.lng;",
  "979": "SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1;",
  "980": "SELECT d.driverRef, d.nationality, d.dob FROM qualifying AS q INNER JOIN drivers AS d ON q.driverId = d.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;",
  "981": "SELECT r.year, r.name AS race_name, r.date AS race_date, r.time AS race_time FROM qualifying q INNER JOIN races r ON q.raceId = r.raceId INNER JOIN drivers d ON q.driverId = d.driverId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1;",
  "982": "SELECT COUNT(DISTINCT drivers.driverId) AS american_puncture_drivers FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'Puncture';",
  "983": "SELECT c.url FROM constructors AS c INNER JOIN constructorstandings AS cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Italian' GROUP BY c.constructorId, c.url ORDER BY SUM(cs.points) DESC LIMIT 1;",
  "984": "SELECT constructors.url FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructors.constructorId ORDER BY SUM(constructorStandings.wins) DESC LIMIT 1;",
  "985": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN lapTimes ON races.raceId = lapTimes.raceId INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE races.name = 'French Grand Prix' AND lapTimes.lap = 3 ORDER BY lapTimes.time DESC LIMIT 1;",
  "986": "SELECT raceId, milliseconds FROM laptimes WHERE lap = 1 AND milliseconds = ( SELECT MIN(milliseconds) FROM laptimes WHERE lap = 1 );",
  "987": "SELECT AVG(results.fastestLapTime) AS average_fastest_lap_time FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11;",
  "988": "SELECT d.forename, d.surname, AVG(p.duration) AS avg_duration FROM drivers AS d INNER JOIN pitStops AS p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985' GROUP BY d.driverId ORDER BY avg_duration ASC LIMIT 3;",
  "989": "SELECT drivers.forename, drivers.surname, results.time FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.time ASC LIMIT 1;",
  "990": "SELECT c.constructorRef, c.url FROM constructorStandings cs INNER JOIN constructors c ON cs.constructorId = c.constructorId INNER JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' GROUP BY cs.constructorId ORDER BY SUM(cs.points) DESC LIMIT 1;",
  "991": "SELECT forename, surname, dob FROM drivers WHERE dob IS NOT NULL AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991' AND nationality = 'Austrian';",
  "992": "SELECT forename || ' ' || surname AS fullname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;",
  "993": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';",
  "994": "SELECT SUM(cr.points) AS total_points, c.name AS constructor_name, c.nationality AS constructor_nationality FROM races r INNER JOIN constructorResults cr ON r.raceId = cr.raceId INNER JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.name, c.nationality ORDER BY total_points DESC LIMIT 1;",
  "995": "SELECT AVG(res.points) AS average_score FROM results AS res INNER JOIN drivers AS d ON res.driverId = d.driverId INNER JOIN races AS r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.name = 'Turkish Grand Prix';",
  "996": "SELECT COUNT(*) / 11.0 AS annual_average_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';",
  "997": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1;",
  "998": "-- SQL query to find the number of victories for the driver ranked 91st in points SELECT SUM(wins) AS total_victories FROM ( SELECT wins, ROW_NUMBER() OVER (ORDER BY points DESC) AS rank FROM driverStandings ) AS ranked_drivers WHERE rank = 91;",
  "999": "SELECT r.name FROM races AS r JOIN results AS res ON r.raceId = res.raceId WHERE res.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);",
  "1000": "SELECT circuits.location || ', ' || circuits.country AS full_location FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId ORDER BY races.date DESC LIMIT 1;",
  "1001": "SELECT d.forename, d.surname FROM qualifying q INNER JOIN races r ON q.raceId = r.raceId INNER JOIN circuits c ON r.circuitId = c.circuitId INNER JOIN drivers d ON q.driverId = d.driverId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.position = 1;",
  "1002": "-- SQL query to find the youngest racer's full name, nationality, and first race SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race_name FROM drivers d INNER JOIN results res ON d.driverId = res.driverId INNER JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1;",
  "1003": "SELECT COUNT(*) AS accident_count FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId WHERE r.name = 'Canadian Grand Prix' AND res.statusId = 3 GROUP BY res.driverId ORDER BY accident_count DESC LIMIT 1;",
  "1004": "SELECT SUM(ds.wins) AS total_wins, d.forename, d.surname FROM driverStandings AS ds INNER JOIN drivers AS d ON ds.driverId = d.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.driverId, d.forename, d.surname;",
  "1005": "SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops;",
  "1006": "SELECT MIN(milliseconds) AS fastest_lap_time FROM lapTimes;",
  "1007": "SELECT MAX(pitStops.duration) AS longest_pit_stop FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "1008": "SELECT pitStops.lap FROM races INNER JOIN pitStops ON races.raceId = pitStops.raceId INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE races.name = 'Australian Grand Prix' AND races.year = 2011 AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "1009": "SELECT pitStops.duration FROM races INNER JOIN pitStops ON races.raceId = pitStops.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2011;",
  "1010": "SELECT MIN(laptimes.time) AS fastest_lap_time FROM drivers INNER JOIN laptimes ON drivers.driverId = laptimes.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "1011": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverId = laptimes.driverId ORDER BY laptimes.time ASC LIMIT 20;",
  "1012": "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN drivers ON laptimes.driverId = drivers.driverId INNER JOIN races ON laptimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY laptimes.time ASC LIMIT 1;",
  "1013": "SELECT MIN(lapTimes.milliseconds) AS fastest_lap_time FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE circuits.name = 'Austrian Grand Prix Circuit';",
  "1014": "SELECT circuits.circuitId, MIN(lapTimes.time) AS fastest_lap_time FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy' GROUP BY circuits.circuitId;",
  "1015": "SELECT r.name FROM races r INNER JOIN circuits c ON r.circuitId = c.circuitId INNER JOIN laptimes l ON r.raceId = l.raceId WHERE c.name = 'Austrian Grand Prix Circuit' AND l.milliseconds = ( SELECT MIN(milliseconds) FROM laptimes INNER JOIN races ON laptimes.raceId = races.raceId WHERE races.circuitId = c.circuitId );",
  "1016": "-- SQL query to find the pit stop duration for the driver who set the lap record SELECT ps.duration FROM pitStops AS ps INNER JOIN races AS r ON ps.raceId = r.raceId INNER JOIN circuits AS c ON r.circuitId = c.circuitId INNER JOIN lapTimes AS lt ON ps.driverId = lt.driverId AND ps.raceId = lt.raceId WHERE r.name = 'Austrian Grand Prix' AND c.name = 'Austrian Grand Prix Circuit' AND lt.time = ( SELECT MIN(lt2.time) FROM lapTimes AS lt2 INNER JOIN races AS r2 ON lt2.raceId = r2.raceId INNER JOIN circuits AS c2 ON r2.circuitId = c2.circuitId WHERE r2.name = 'Austrian Grand Prix' AND c2.name = 'Austrian Grand Prix Circuit' );",
  "1017": "SELECT DISTINCT T3.lat, T3.lng FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488';",
  "1018": "SELECT AVG(pitStops.milliseconds) AS average_pit_stop_time FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "1019": "SELECT AVG(laptimes.milliseconds) AS average_lap_time FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN laptimes ON races.raceId = laptimes.raceId WHERE circuits.country = 'Italy';",
  "1020": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );",
  "1021": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
  "1022": "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);",
  "1023": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';",
  "1024": "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;",
  "1025": "SELECT L.name FROM `Match` M INNER JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;",
  "1026": "SELECT T.team_long_name FROM Team AS T JOIN Match AS M ON T.team_api_id = M.home_team_api_id WHERE M.season = '2015/2016' GROUP BY T.team_api_id HAVING SUM(CASE WHEN M.home_team_goal - M.away_team_goal < 0 THEN 1 ELSE 0 END) > 0 ORDER BY SUM(CASE WHEN M.home_team_goal - M.away_team_goal < 0 THEN 1 ELSE 0 END) ASC LIMIT 1;",
  "1027": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY PA.penalties DESC LIMIT 10;",
  "1028": "SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND T1.away_team_goal > T1.home_team_goal GROUP BY T2.team_long_name ORDER BY COUNT(*) DESC LIMIT 1;",
  "1029": "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4;",
  "1030": "SELECT L.name AS league_name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id, L.name ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;",
  "1031": "SELECT STRFTIME('%Y', 'now') - SUBSTR(P.birthday, 1, 4) AS age FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.sprint_speed >= 97 AND SUBSTR(PA.date, 1, 4) >= '2013' AND SUBSTR(PA.date, 1, 4) <= '2015';",
  "1032": "SELECT L.name, COUNT(*) AS match_count FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id GROUP BY M.league_id ORDER BY match_count DESC LIMIT 1;",
  "1033": "SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
  "1034": "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' AND overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%' AND overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes ) );",
  "1035": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
  "1036": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE strftime('%Y', TA.date) = '2012' AND TA.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' );",
  "1037": "SELECT (CAST(SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(P.player_api_id) AS left_foot_percentage FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE CAST(SUBSTR(P.birthday, 1, 4) AS INTEGER) BETWEEN 1987 AND 1992;",
  "1038": "SELECT L.name AS league_name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM Match M INNER JOIN League L ON M.league_id = L.id GROUP BY L.id ORDER BY total_goals ASC LIMIT 5;",
  "1039": "SELECT SUM(T2.long_shots) * 1.0 / COUNT(T2.player_fifa_api_id) AS average_long_shots FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ahmed Samir Farag';",
  "1040": "SELECT P.player_name, AVG(PA.heading_accuracy) AS avg_heading_accuracy FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 GROUP BY P.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10;",
  "1041": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date >= '2014-01-01' AND TA.date <= '2014-12-31' AND TA.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01' AND date <= '2014-12-31' ) ORDER BY TA.chanceCreationPassing DESC;",
  "1042": "SELECT L.name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);",
  "1043": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';",
  "1044": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';",
  "1045": "SELECT Player_Attributes.attacking_work_rate FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Franco Zennaro';",
  "1046": "SELECT DISTINCT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag';",
  "1047": "SELECT PA.heading_accuracy FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00';",
  "1048": "SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND strftime('%Y', T2.date) = '2011';",
  "1049": "SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2015/2016';",
  "1050": "SELECT PA.preferred_foot FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.birthday = (SELECT MAX(birthday) FROM Player);",
  "1051": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes);",
  "1052": "SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.weight < 130 AND PA.preferred_foot = 'left';",
  "1053": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky';",
  "1054": "SELECT Player_Attributes.defensive_work_rate FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'David Wilson';",
  "1055": "SELECT P.birthday FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
  "1056": "SELECT League.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';",
  "1057": "SELECT AVG(M.home_team_goal) AS average_home_team_goal FROM `Match` AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011';",
  "1058": "-- SQL query to find the player with the highest average finishing rate between the tallest and shortest players SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player) GROUP BY P.player_name ORDER BY AVG(PA.finishing) DESC LIMIT 1;",
  "1059": "SELECT player_name FROM Player WHERE height > 180;",
  "1060": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';",
  "1061": "SELECT COUNT(*) FROM Player WHERE weight > 170 AND SUBSTR(player_name, 1, INSTR(player_name, ' ') - 1) = 'Adam';",
  "1062": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';",
  "1063": "SELECT Player_Attributes.potential FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Doran';",
  "1064": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left';",
  "1065": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast';",
  "1066": "SELECT Team_Attributes.buildUpPlayPassingClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_short_name = 'CLB';",
  "1067": "SELECT DISTINCT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > 70;",
  "1068": "SELECT AVG(t2.overall_rating) AS average_overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND strftime('%Y', t2.date) BETWEEN '2010' AND '2015';",
  "1069": "SELECT DISTINCT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);",
  "1070": "SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';",
  "1071": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32;",
  "1072": "SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran';",
  "1073": "SELECT COUNT(*) AS match_count FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10';",
  "1074": "SELECT Team.team_short_name FROM Team INNER JOIN Match ON Team.team_api_id = Match.home_team_api_id WHERE Match.home_team_goal = 10;",
  "1075": "-- Your SQL query SELECT DISTINCT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = 61 AND PA.balance = (SELECT MAX(balance) FROM Player_Attributes);",
  "1076": "SELECT AVG(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE NULL END) - AVG(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE NULL END) AS avg_ball_control_difference FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id;",
  "1077": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';",
  "1078": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;",
  "1079": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
  "1080": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';",
  "1081": "SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League';",
  "1082": "SELECT League.name FROM Country INNER JOIN League ON Country.id = League.country_id WHERE Country.name = 'Germany';",
  "1083": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
  "1084": "SELECT COUNT(DISTINCT Player.player_api_id) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high';",
  "1085": "SELECT CASE WHEN MAX(CASE WHEN P.player_name = 'Alexis' THEN PA.crossing END) > MAX(CASE WHEN P.player_name = 'Ariel Borysiuk' THEN PA.crossing END) AND MAX(CASE WHEN P.player_name = 'Alexis' THEN PA.crossing END) > MAX(CASE WHEN P.player_name = 'Arouna Kone' THEN PA.crossing END) THEN 'Alexis' WHEN MAX(CASE WHEN P.player_name = 'Ariel Borysiuk' THEN PA.crossing END) > MAX(CASE WHEN P.player_name = 'Arouna Kone' THEN PA.crossing END) THEN 'Ariel Borysiuk' ELSE 'Arouna Kone' END AS best_crossing_player FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone');",
  "1086": "SELECT DISTINCT Player_Attributes.heading_accuracy FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Ariel Borysiuk';",
  "1087": "SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70;",
  "1088": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70;",
  "1089": "SELECT COUNT(Match.id) FROM `Match` INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';",
  "1090": "SELECT pa.long_passing FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id ORDER BY p.birthday ASC LIMIT 1;",
  "1091": "SELECT COUNT(*) FROM `Match` AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND SUBSTR(M.date, 1, 7) = '2009-04';",
  "1092": "SELECT L.name AS league_name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;",
  "1093": "SELECT AVG(T2.overall_rating) AS average_overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986';",
  "1094": "SELECT ((T1.overall_rating - T2.overall_rating) * 100.0 / T2.overall_rating) AS percentage_difference FROM (SELECT overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Ariel Borysiuk') AS T1, (SELECT overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel') AS T2;",
  "1095": "SELECT AVG(TA.buildUpPlaySpeed) AS average_buildUpPlaySpeed FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE T.team_long_name = 'Heart of Midlothian';",
  "1096": "SELECT AVG(T2.overall_rating) AS average_overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino';",
  "1097": "SELECT SUM(T1.crossing) AS total_crossing_score FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox';",
  "1098": "SELECT ta.chanceCreationPassing, ta.chanceCreationPassingClass FROM Team_Attributes AS ta INNER JOIN Team AS t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Ajax' ORDER BY ta.chanceCreationPassing DESC LIMIT 1;",
  "1099": "SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Abdou Diallo';",
  "1100": "SELECT MAX(T2.overall_rating) AS highest_overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Dorlan Pabon';",
  "1101": "SELECT AVG(M.away_team_goal) AS average_goals FROM Team AS T INNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy';",
  "1102": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 77 AND PA.date LIKE '2016-06-23%' ORDER BY P.birthday ASC LIMIT 1;",
  "1103": "SELECT Player_Attributes.overall_rating FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Mooy' AND Player_Attributes.date LIKE '2016-02-04%';",
  "1104": "SELECT Player_Attributes.potential FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';",
  "1105": "SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date LIKE '2015-05-01%';",
  "1106": "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Berigaud' AND T2.date = '2013-02-22 00:00:00';",
  "1107": "SELECT MIN(T2.date) AS first_date_with_highest_crossing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Constant' AND T2.crossing = ( SELECT MAX(T3.crossing) FROM Player_Attributes AS T3 INNER JOIN Player AS T4 ON T3.player_api_id = T4.player_api_id WHERE T4.player_name = 'Kevin Constant' );",
  "1108": "SELECT Team_Attributes.buildUpPlaySpeedClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'Willem II' AND Team_Attributes.date = '2012-02-22';",
  "1109": "SELECT Team_Attributes.buildUpPlayDribblingClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_short_name = 'LEI' AND Team_Attributes.date = '2015-09-10 00:00:00';",
  "1110": "SELECT Team_Attributes.buildUpPlayPassingClass FROM Team INNER JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_long_name = 'FC Lorient' AND Team_Attributes.date LIKE '2010-02-22%';",
  "1111": "SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00';",
  "1112": "SELECT Team_Attributes.chanceCreationCrossingClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'Hull City' AND Team_Attributes.date = '2010-02-22 00:00:00';",
  "1113": "SELECT TA.defenceAggressionClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Hannover 96' AND TA.date LIKE '2015-09-10%';",
  "1114": "SELECT AVG(T2.overall_rating) AS avg_overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND SUBSTR(T2.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';",
  "1115": "SELECT -- Calculate the percentage difference ((Landon_Donovan_Rating - Jordan_Bowery_Rating) * 100.0 / Landon_Donovan_Rating) AS percentage_difference FROM ( -- Subquery to get the ratings for both players SELECT MAX(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating END) AS Landon_Donovan_Rating, MAX(CASE WHEN P.player_name = 'Jordan Bowery' THEN PA.overall_rating END) AS Jordan_Bowery_Rating FROM Player P INNER JOIN Player_Attributes PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE PA.date = '2013-07-12' AND P.player_name IN ('Landon Donovan', 'Jordan Bowery') ) AS Ratings;",
  "1116": "WITH PlayerRanking AS ( SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) AS rank FROM Player ) SELECT player_name FROM PlayerRanking WHERE rank = 1;",
  "1117": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;",
  "1118": "SELECT player_name FROM Player WHERE CAST(strftime('%Y', CURRENT_TIMESTAMP) AS INTEGER) - CAST(strftime('%Y', datetime(birthday)) AS INTEGER) > 34;",
  "1119": "SELECT SUM(T2.home_team_goal) AS total_goals FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 WHERE T1.player_name = 'Aaron Lennon';",
  "1120": "SELECT SUM(M.away_team_goal) AS total_away_goals FROM Player P INNER JOIN Match M ON P.player_api_id = M.away_player_1 OR P.player_api_id = M.away_player_2 OR P.player_api_id = M.away_player_3 OR P.player_api_id = M.away_player_4 OR P.player_api_id = M.away_player_5 OR P.player_api_id = M.away_player_6 OR P.player_api_id = M.away_player_7 OR P.player_api_id = M.away_player_8 OR P.player_api_id = M.away_player_9 OR P.player_api_id = M.away_player_10 OR P.player_api_id = M.away_player_11 WHERE P.player_name = 'Daan Smith' OR P.player_name = 'Filipe Ferreira';",
  "1121": "SELECT SUM(M.home_team_goal) AS total_goals FROM Player AS P JOIN Match AS M ON P.player_api_id IN ( M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11 ) WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', P.birthday) <= 30;",
  "1122": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes );",
  "1123": "SELECT P.player_name FROM Player_Attributes PA INNER JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes);",
  "1124": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high';",
  "1125": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY CAST(strftime('%J', CURRENT_TIMESTAMP) AS REAL) - CAST(strftime('%J', T1.birthday) AS REAL) DESC LIMIT 1;",
  "1126": "SELECT DISTINCT P.player_name FROM Player AS P JOIN Match AS M ON P.player_api_id = M.home_team_api_id OR P.player_api_id = M.away_team_api_id JOIN Team AS T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_id JOIN League AS L ON T.team_fifa_api_id = L.id JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Belgium';",
  "1127": "SELECT P.player_name, C.name AS country_name FROM Player_Attributes PA INNER JOIN Player P ON PA.player_api_id = P.player_api_id INNER JOIN Match M ON P.player_api_id IN ( M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11, M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11 ) INNER JOIN Team T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_id INNER JOIN League L ON T.team_fifa_api_id = L.country_id INNER JOIN Country C ON L.country_id = C.id WHERE PA.vision > 89 GROUP BY P.player_name, C.name",
  "1128": "SELECT C.name AS country_name, AVG(P.weight) AS average_weight FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN Country AS C ON T.team_fifa_api_id = C.id GROUP BY C.id, C.name ORDER BY average_weight DESC LIMIT 1;",
  "1129": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow';",
  "1130": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe';",
  "1131": "SELECT AVG(P.height) AS average_height FROM Country C INNER JOIN League L ON C.id = L.country_id INNER JOIN Team T ON L.country_id = C.id INNER JOIN Player P ON T.team_api_id = P.player_api_id WHERE C.name = 'Italy';",
  "1132": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;",
  "1133": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';",
  "1134": "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_difference;",
  "1135": "SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY potential ASC LIMIT 5;",
  "1136": "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';",
  "1137": "SELECT (CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE NULL END) AS REAL) * 100.0) / COUNT(*) AS percentage_of_players FROM Player_Attributes;",
  "1138": "SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Poland Ekstraklasa';",
  "1139": "SELECT Match.home_team_goal, Match.away_team_goal FROM Match INNER JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND Match.date LIKE '2008-09-24%';",
  "1140": "SELECT PA.sprint_speed, PA.agility, PA.acceleration FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Alexis Blin';",
  "1141": "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';",
  "1142": "SELECT COUNT(M.id) FROM `Match` AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' AND L.name = 'Italian Serie A';",
  "1143": "SELECT MAX(M.home_team_goal) AS highest_home_team_goal FROM `Match` AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Netherlands Eredivisie';",
  "1144": "SELECT PA.finishing, PA.curve FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player);",
  "1145": "SELECT L.name, COUNT(M.id) AS match_count FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY match_count DESC LIMIT 4;",
  "1146": "SELECT T.team_long_name FROM Team AS T INNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id WHERE M.away_team_goal = ( SELECT MAX(away_team_goal) FROM Match );",
  "1147": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;",
  "1148": "SELECT CAST(COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 ELSE NULL END) AS REAL) * 100.0 / COUNT(*) AS percentage FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id;",
  "1149": "SELECT ABS( CAST( (COUNT(CASE WHEN Admission = '+' THEN ID END) / COUNT(CASE WHEN Admission = '-' THEN ID END)) - 1 AS REAL ) * 100 ) AS DeviationPercentage FROM Patient WHERE SEX = 'M';",
  "1150": "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN ID ELSE NULL END) AS REAL) * 100.0 / COUNT(ID) AS Percentage FROM Patient WHERE SEX = 'F';",
  "1151": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS Percent_Inpatients FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';",
  "1152": "SELECT CAST(COUNT(CASE WHEN Admission = '-' THEN ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN Admission = '+' THEN ID ELSE NULL END) AS OutpatientToInpatientRatio FROM Patient WHERE Diagnosis = 'SLE';",
  "1153": "SELECT Patient.Diagnosis AS Diagnosis, Laboratory.Date AS Laboratory_Test_Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609;",
  "1154": "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.ID = 163109;",
  "1155": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.LDH > 500;",
  "1156": "SELECT P.ID, strftime('%Y', 'now') - strftime('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+';",
  "1157": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 2;",
  "1158": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
  "1159": "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;",
  "1160": "SELECT CAST(COUNT(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 END) AS REAL) * 100.0 / COUNT(P.ID) AS percentage FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F';",
  "1161": "SELECT AVG(E.`aCL IgG`) AS Average_aCL_IgG FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Admission = '+' AND strftime('%Y', CURRENT_DATE) - strftime('%Y', P.Birthday) >= 50;",
  "1162": "SELECT COUNT(ID) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND Admission = '-' AND SEX = 'F';",
  "1163": "SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS Youngest_Age FROM Patient;",
  "1164": "SELECT COUNT(DISTINCT Patient.ID) AS FemaleThrombosisCount FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Examination.Thrombosis = 1 AND Examination.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';",
  "1165": "SELECT MAX(STRFTIME('%Y', P.Birthday)) - MIN(STRFTIME('%Y', P.Birthday)) AS AgeGap FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200;",
  "1166": "SELECT T2.Symptoms, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1;",
  "1167": "SELECT CAST(COUNT(DISTINCT P.ID) AS REAL) / 12 AS AvgTestsPerMonth FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31';",
  "1168": "SELECT L.Date AS 'Laboratory Completion Date', strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) AS 'Age of Initial Arrival' FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' ORDER BY P.Birthday ASC, L.Date DESC LIMIT 1;",
  "1169": "SELECT CAST(SUM(CASE WHEN Patient.SEX = 'M' AND Laboratory.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Patient.SEX = 'F' AND Laboratory.UA <= 6.5 THEN 1 ELSE 0 END) AS male_to_female_ratio FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID;",
  "1170": "SELECT COUNT(DISTINCT P.ID) AS PatientCount FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE strftime('%Y', E.`Examination Date`) - strftime('%Y', P.`First Date`) < 1;",
  "1171": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18;",
  "1172": "SELECT COUNT(DISTINCT Patient.ID) AS MalePatientsWithElevatedTBL FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` >= 2.0;",
  "1173": "SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;",
  "1174": "SELECT AVG(1999 - CAST(SUBSTR(Birthday, 1, 4) AS INTEGER)) AS Average_Age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1991-10-01' AND '1991-10-31';",
  "1175": "SELECT (CAST(STRFTIME('%Y', E.`Examination Date`) AS INTEGER) - CAST(STRFTIME('%Y', P.Birthday) AS INTEGER)) AS Age, P.Diagnosis FROM Laboratory L INNER JOIN Patient P ON L.ID = P.ID INNER JOIN Examination E ON L.ID = E.ID WHERE L.HGB = (SELECT MAX(HGB) FROM Laboratory)",
  "1176": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';",
  "1177": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND `Date` = '1995-09-04';",
  "1178": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1;",
  "1179": "SELECT E.`aCL IgM` FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.`Examination Date` = '1993-11-12';",
  "1180": "SELECT Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-06-12';",
  "1181": "SELECT STRFTIME('%Y', Laboratory.Date) - STRFTIME('%Y', Patient.Birthday) AS Age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.Date = '1991-10-21' AND Laboratory.UA = 8.4;",
  "1182": "SELECT COUNT(L.ID) AS Total_Laboratory_Tests FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS' AND L.Date BETWEEN '1995-01-01' AND '1995-12-31';",
  "1183": "SELECT Patient.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1997-01-27';",
  "1184": "SELECT E.Symptoms FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1993-09-27';",
  "1185": "SELECT (SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) AS DecreaseRate FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18';",
  "1186": "SELECT DISTINCT P.ID FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE P.Diagnosis = 'Behcet' AND E.`Examination Date` >= '1997-01-01' AND E.`Examination Date` <= '1997-12-31';",
  "1187": "SELECT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;",
  "1188": "SELECT COUNT(ID) AS FemalePatients1964, ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+' GROUP BY ID;",
  "1189": "SELECT COUNT(*) AS PatientCount FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;",
  "1190": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS Percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;",
  "1191": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS Percentage FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981';",
  "1192": "SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0 AND P.Admission = '-';",
  "1193": "SELECT COUNT(P.ID) AS Total_Patients FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`ANA Pattern` != 'P' AND P.SEX = 'F' AND STRFTIME('%Y', P.Birthday) BETWEEN '1980' AND '1989';",
  "1194": "SELECT DISTINCT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123;",
  "1195": "SELECT AVG(Laboratory.ALB) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';",
  "1196": "SELECT E.Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' GROUP BY E.Symptoms ORDER BY COUNT(E.Symptoms) DESC LIMIT 1;",
  "1197": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;",
  "1198": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';",
  "1199": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE STRFTIME('%Y', Date) = '1997' AND (TP <= 6 OR TP >= 8.5);",
  "1200": "SELECT (CAST(COUNT(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 END) AS REAL) * 100.0) / COUNT(P.ID) AS percentage FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis = 'SLE';",
  "1201": "SELECT (CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*)) AS FemalePercentage FROM Patient WHERE Diagnosis = 'RA' AND strftime('%Y', Birthday) = '1980';",
  "1202": "SELECT COUNT(Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND Examination.Diagnosis = 'Behcet' AND Patient.Admission = '-';",
  "1203": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5;",
  "1204": "SELECT JULIANDAY(E.`Examination Date`) - JULIANDAY(P.`First Date`) AS Days FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.ID = 821298;",
  "1205": "SELECT CASE WHEN Patient.SEX = 'M' AND Laboratory.UA > 8.0 THEN 'Yes' WHEN Patient.SEX = 'F' AND Laboratory.UA > 6.5 THEN 'Yes' ELSE 'No' END AS Is_Normal_Range FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 57266;",
  "1206": "SELECT `Date` FROM Laboratory WHERE ID = 48473 AND GOT >= 60;",
  "1207": "SELECT P.ID, P.SEX, P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT < 60 AND strftime('%Y', L.Date) = '1994';",
  "1208": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;",
  "1209": "SELECT Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday ASC;",
  "1210": "SELECT AVG(LDH) AS Average_LDH FROM Laboratory WHERE LDH < 500;",
  "1211": "SELECT P.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday) AS age FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.LDH BETWEEN 600 AND 800;",
  "1212": "SELECT DISTINCT P.Admission FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.ALP < 300;",
  "1213": "SELECT P.ID, CASE WHEN L.ALP < 300 THEN 'Within Normal Range' ELSE 'Outside Normal Range' END AS ALP_Status FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01';",
  "1214": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;",
  "1215": "SELECT L.TP - 8.5 AS TP_Deviation FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.TP > 8.5;",
  "1216": "SELECT * FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB < 3.5 OR Laboratory.ALB > 5.5) ORDER BY Patient.Birthday DESC;",
  "1217": "SELECT P.ID, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Outside Normal Range' END AS AlbuminStatus FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982';",
  "1218": "SELECT CAST(COUNT(CASE WHEN T1.UA > 6.5 THEN T2.ID END) AS REAL) * 100.0 / COUNT(T2.ID) AS percentage FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F';",
  "1219": "-- SQL Query to calculate the average UA index for patients with normal UA SELECT AVG(L.UA) AS Average_UA FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = ( SELECT MAX(L2.Date) FROM Laboratory L2 WHERE L2.ID = P.ID ) AND ( (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) );",
  "1220": "SELECT P.ID, P.SEX, P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.UN = 29;",
  "1221": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30;",
  "1222": "SELECT COUNT(*) AS MalePatientsWithHighCRE FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5;",
  "1223": "SELECT (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END)) AS more_male_than_female FROM Laboratory L INNER JOIN Patient P ON L.ID = P.ID WHERE L.CRE >= 1.5;",
  "1224": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory);",
  "1225": "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS patient_ids FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX;",
  "1226": "SELECT P.ID, L.`T-CHO` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient) AND L.`T-CHO` = ( SELECT MAX(L2.`T-CHO`) FROM Laboratory AS L2 INNER JOIN Patient AS P2 ON L2.ID = P2.ID WHERE P2.Birthday = (SELECT MIN(Birthday) FROM Patient) );",
  "1227": "SELECT AVG(strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS AverageAge FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250;",
  "1228": "SELECT Patient.ID, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;",
  "1229": "SELECT COUNT(DISTINCT P.ID) AS distinct_patients FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TG >= 200 AND strftime('%Y', 'now') - strftime('%Y', P.Birthday) > 50;",
  "1230": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.CPK < 250;",
  "1231": "SELECT COUNT(DISTINCT P.ID) AS male_patient_count FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND STRFTIME('%Y', P.Birthday) BETWEEN '1936' AND '1956' AND L.CPK >= 250;",
  "1232": "SELECT P.ID, P.SEX, CAST(STRFTIME('%Y', CURRENT_TIMESTAMP) AS INTEGER) - CAST(STRFTIME('%Y', P.Birthday) AS INTEGER) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250;",
  "1233": "SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Description) = '1991' AND T2.GLU < 180;",
  "1234": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX ORDER BY CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', P.Birthday) AS INTEGER);",
  "1235": "SELECT P.ID, P.Diagnosis, strftime('%Y', 'now') - strftime('%Y', P.Birthday) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5;",
  "1236": "SELECT P.Admission FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND strftime('%Y', 'now') - strftime('%Y', P.Birthday) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0);",
  "1237": "SELECT DISTINCT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.HGB < 10;",
  "1238": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1;",
  "1239": "SELECT P.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', P.Birthday) AS INTEGER) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.ID) >= 2;",
  "1240": "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;",
  "1241": "SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS difference FROM Laboratory WHERE PLT <= 100 OR PLT >= 400;",
  "1242": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', L.Date) = '1984' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400;",
  "1243": "SELECT CAST(SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS Percentage_Female_PT_Abnormal FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', 'now') - strftime('%Y', P.Birthday) > 55 AND L.PT >= 14;",
  "1244": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.`First Date`) > '1992' AND L.PT < 14;",
  "1245": "SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45;",
  "1246": "SELECT COUNT(DISTINCT Laboratory.ID) AS UniquePatientCount FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 0;",
  "1247": "SELECT COUNT(DISTINCT Patient.ID) AS MalePatientsWithAbnormalFibrinogen FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.WBC > 3.5 AND Laboratory.WBC < 9.0 AND ( Laboratory.FG <= 150 OR Laboratory.FG >= 450 );",
  "1248": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND T2.FG NOT BETWEEN 150 AND 450;",
  "1249": "SELECT DISTINCT Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`U-PRO` >= 30;",
  "1250": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.`U-PRO` > 0 AND Laboratory.`U-PRO` < 30;",
  "1251": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;",
  "1252": "SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Examination.Symptoms IS NOT NULL;",
  "1253": "-- Your SQL query SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA = ( SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500 );",
  "1254": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE CAST(STRFTIME('%Y', T1.`First Date`) AS INTEGER) >= 1990 AND T2.IGA > 80 AND T2.IGA < 500;",
  "1255": "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGM <= 40 OR L.IGM >= 400 GROUP BY P.Diagnosis ORDER BY COUNT(*) DESC LIMIT 1;",
  "1256": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL;",
  "1257": "SELECT COUNT(DISTINCT P.ID) AS patient_count FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE >= 1.5 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) < 70;",
  "1258": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.RA IN ('-', '+-') AND Examination.KCT = '+';",
  "1259": "SELECT Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE STRFTIME('%Y', Patient.Birthday) >= '1985' AND Laboratory.RA IN ('-', '+-');",
  "1260": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 60 AND L.RF < 20;",
  "1261": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 0 AND T2.RF < 20;",
  "1262": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.C3 > 35 AND Examination.`ANA Pattern` = 'P';",
  "1263": "SELECT L.ID FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.HCT <= 29 OR L.HCT >= 52 ORDER BY E.`aCL IgA` DESC LIMIT 1;",
  "1264": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis = 1 AND Laboratory.C4 > 10;",
  "1265": "SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RNP IN ('-', '+-') AND T2.Admission = '+';",
  "1266": "SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1;",
  "1267": "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SM IN ('-', '+-') AND T2.Thrombosis = 0;",
  "1268": "SELECT P.ID FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.SM NOT IN ('negative', '0') ORDER BY P.Birthday DESC LIMIT 3;",
  "1269": "SELECT Examination.ID FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE \"Examination Date\" > '1997-01-01' AND SC170 IN ('negative', '0');",
  "1270": "SELECT COUNT(DISTINCT P.ID) AS FemalePatientCount FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID INNER JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND L.SC170 IN ('negative', '0') AND E.Symptoms IS NULL;",
  "1271": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.SSA IN ('-', '+') AND STRFTIME('%Y', Patient.`First Date`) < '2000';",
  "1272": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` ASC LIMIT 1;",
  "1273": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SSB IN ('-', '0') AND Examination.Diagnosis = 'SLE';",
  "1274": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.SSB IN ('negative', '0') AND Examination.Symptoms IS NOT NULL;",
  "1275": "SELECT COUNT(DISTINCT T2.ID) AS MalePatients FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CENTROMEA IN ('-', '+-') AND T1.SSB IN ('-', '+-') AND T2.SEX = 'M';",
  "1276": "SELECT DISTINCT Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.DNA >= 8;",
  "1277": "SELECT COUNT(DISTINCT Patient.ID) AS UniquePatients FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA < 8 AND Patient.Description IS NULL;",
  "1278": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Patient.Admission = '+';",
  "1279": "SELECT CAST(SUM(CASE WHEN P.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS Percentage FROM Laboratory L INNER JOIN Patient P ON L.ID = P.ID WHERE L.GOT >= 60;",
  "1280": "SELECT COUNT(DISTINCT Patient.ID) AS MalePatientCount FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GOT < 60;",
  "1281": "SELECT MAX(P.Birthday) AS Youngest_Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60;",
  "1282": "SELECT P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3;",
  "1283": "SELECT COUNT(*) AS MalePatientsWithNormalGPT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT < 60;",
  "1284": "SELECT MIN(P.`First Date`) AS First_Date FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH < 500 AND L.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500);",
  "1285": "SELECT L.Date FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.`First Date` = (SELECT MAX(`First Date`) FROM Patient) AND L.LDH >= 500;",
  "1286": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+';",
  "1287": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300;",
  "1288": "SELECT Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;",
  "1289": "SELECT COUNT(DISTINCT L.ID) AS PatientCount FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;",
  "1290": "SELECT Date FROM Laboratory WHERE ALB = ( SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 );",
  "1291": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5;",
  "1292": "SELECT E.`aCL IgG`, E.`aCL IgM`, E.`aCL IgA` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Sex = 'F' AND L.UA > 6.50 ORDER BY L.UA DESC LIMIT 1;",
  "1293": "SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5;",
  "1294": "-- SQL query to find the patient's ID with normal creatinine and highest anti-Cardiolipin antibody concentration SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T2.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination );",
  "1295": "SELECT COUNT(DISTINCT T1.ID) AS PatientCount FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 AND T2.`ANA Pattern` LIKE '%P%';",
  "1296": "SELECT E.ANA FROM Laboratory L INNER JOIN Examination E ON L.ID = E.ID WHERE L.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 ) LIMIT 1;",
  "1297": "SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.`T-CHO` >= 250 AND Examination.KCT = '-';",
  "1298": "SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.`T-CHO` < 250 AND Examination.`ANA Pattern` = 'P';",
  "1299": "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL;",
  "1300": "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG = ( SELECT MAX(TG) FROM Laboratory WHERE TG < 200 );",
  "1301": "SELECT DISTINCT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250;",
  "1302": "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');",
  "1303": "SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180 ORDER BY P.Birthday ASC LIMIT 1;",
  "1304": "SELECT COUNT(DISTINCT Laboratory.ID) AS PatientCount FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.GLU < 180 AND Examination.Thrombosis = 0;",
  "1305": "SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '+' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;",
  "1306": "SELECT COUNT(DISTINCT P.ID) AS Normal_WBC_Count FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;",
  "1307": "SELECT DISTINCT Patient.ID FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-';",
  "1308": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL;",
  "1309": "SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Diagnosis = 'MCTD' AND L.PLT > 100 AND L.PLT < 400;",
  "1310": "SELECT AVG(L.PT) AS Average_PT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14;",
  "1311": "SELECT COUNT(*) AS SevereThrombosisWithNormalPT FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE (E.Thrombosis = 1 OR E.Thrombosis = 2) AND L.PT < 14;",
  "1312": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
  "1313": "SELECT COUNT(*) FROM member AS m INNER JOIN major AS mj ON m.link_to_major = mj.major_id WHERE mj.college = 'College of Engineering' AND m.position = 'Student';",
  "1314": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Student_Club' AND major.department = 'Art and Design Department';",
  "1315": "SELECT COUNT(DISTINCT m.member_id) AS student_count FROM event e INNER JOIN attendance a ON e.event_id = a.link_to_event INNER JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Student Club';",
  "1316": "SELECT member.phone FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer';",
  "1317": "SELECT COUNT(*) FROM event AS e INNER JOIN attendance AS a ON e.event_id = a.link_to_event INNER JOIN member AS m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Student_Club' AND m.t_shirt_size = 'Medium';",
  "1318": "SELECT e.event_name FROM event AS e INNER JOIN attendance AS a ON e.event_id = a.link_to_event INNER JOIN member AS m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_name ORDER BY COUNT(*) DESC LIMIT 1;",
  "1319": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
  "1320": "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
  "1321": "SELECT COUNT(*) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE STRFTIME('%Y', T2.event_date) = '2019' AND T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T2.event_name = 'Student_Club';",
  "1322": "SELECT COUNT(T1.event_id) AS num_meeting_events FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(DISTINCT T2.link_to_member) > 10;",
  "1323": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event LEFT JOIN income i ON e.event_id = i.link_to_member GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20 AND i.income_id IS NULL;",
  "1324": "SELECT CAST(COUNT(T2.link_to_member) AS REAL) / COUNT(DISTINCT T1.event_id) AS avg_attendance FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting';",
  "1325": "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense);",
  "1326": "SELECT COUNT(DISTINCT member.member_id) AS member_count FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
  "1327": "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud';",
  "1328": "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';",
  "1329": "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey';",
  "1330": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';",
  "1331": "SELECT SUM(income.amount) AS total_funds_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';",
  "1332": "SELECT SUM(b.spent) AS total_spent_on_food FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event WHERE e.event_name = 'September Meeting' AND b.category = 'Food';",
  "1333": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';",
  "1334": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois' AND member.position = 'Student_Club';",
  "1335": "SELECT SUM(b.spent) AS total_spent FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement' AND e.event_name = 'September Meeting';",
  "1336": "-- SQL query to find the department that both Pierce and Guidi took SELECT M.department FROM member AS Mem INNER JOIN major AS M ON Mem.link_to_major = M.major_id WHERE Mem.first_name = 'Pierce' INTERSECT SELECT M.department FROM member AS Mem INNER JOIN major AS M ON Mem.link_to_major = M.major_id WHERE Mem.first_name = 'Guidi';",
  "1337": "SELECT SUM(budget.amount) AS total_budgeted_amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';",
  "1338": "SELECT e.event_name, e.event_date, ex.approved FROM event e INNER JOIN budget b ON e.event_id = b.link_to_event INNER JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.event_name = 'October Meeting' AND e.event_date = '2019-10-08';",
  "1339": "SELECT AVG(expense.cost) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND CAST(SUBSTR(expense.expense_date, 5, 2) AS INTEGER) IN (9, 10);",
  "1340": "SELECT SUM(CASE WHEN SUBSTR(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END) AS difference FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;",
  "1341": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';",
  "1342": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';",
  "1343": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');",
  "1344": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';",
  "1345": "SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences';",
  "1346": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
  "1347": "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';",
  "1348": "SELECT COUNT(*) AS exceeded_budgets FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;",
  "1349": "SELECT SUM(budget.amount) AS total_budget FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';",
  "1350": "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20';",
  "1351": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",
  "1352": "SELECT COUNT(*) AS medium_t_shirt_count FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium';",
  "1353": "SELECT zip_code.type FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';",
  "1354": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
  "1355": "SELECT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
  "1356": "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';",
  "1357": "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues';",
  "1358": "SELECT m.first_name, m.last_name FROM income i INNER JOIN member m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' AND i.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues') LIMIT 1;",
  "1359": "SELECT CAST(SUM(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) AS ratio FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement';",
  "1360": "SELECT SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) * 100.0 / SUM(b.amount) AS parking_percentage FROM budget b INNER JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Speaker';",
  "1361": "SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';",
  "1362": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';",
  "1363": "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';",
  "1364": "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';",
  "1365": "SELECT e.expense_description FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id WHERE b.budget_id = ( SELECT budget_id FROM budget ORDER BY remaining ASC LIMIT 1 );",
  "1366": "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting';",
  "1367": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(*) DESC LIMIT 1;",
  "1368": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';",
  "1369": "SELECT e.event_name FROM event e INNER JOIN budget b ON e.event_id = b.link_to_event WHERE b.amount = (SELECT MAX(amount) FROM budget);",
  "1370": "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';",
  "1371": "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer';",
  "1372": "SELECT income.date_received FROM income INNER JOIN member ON member.member_id = income.link_to_member WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';",
  "1373": "SELECT COUNT(*) AS member_count FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE z.state = 'Maryland';",
  "1374": "SELECT COUNT(*) AS event_count FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240';",
  "1375": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';",
  "1376": "SELECT e.event_name FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' ORDER BY CAST(b.spent AS REAL) / b.amount DESC LIMIT 1;",
  "1377": "SELECT COUNT(*) FROM member WHERE position = 'President';",
  "1378": "SELECT MAX(spent) AS highest_spent FROM budget;",
  "1379": "SELECT COUNT(*) AS meeting_count FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020';",
  "1380": "SELECT SUM(spent) AS total_spent_on_food FROM budget WHERE category = 'Food';",
  "1381": "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY member.member_id HAVING COUNT(DISTINCT attendance.link_to_event) > 7;",
  "1382": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';",
  "1383": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';",
  "1384": "SELECT SUM(income.amount) AS total_income FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';",
  "1385": "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;",
  "1386": "SELECT SUM(expense.cost) AS total_expense FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';",
  "1387": "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id WHERE event.event_name = 'Yearly Kickoff';",
  "1388": "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount = (SELECT MAX(amount) FROM income);",
  "1389": "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost ASC LIMIT 1;",
  "1390": "SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) * 100.0) / SUM(ex.cost) AS percentage FROM event AS e JOIN budget AS b ON e.event_id = b.link_to_event JOIN expense AS ex ON b.budget_id = ex.link_to_budget;",
  "1391": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id;",
  "1392": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1;",
  "1393": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';",
  "1394": "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
  "1395": "SELECT COUNT(DISTINCT attendance.link_to_member) AS member_count FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Community Theater' AND SUBSTR(event.event_date, 1, 4) = '2019';",
  "1396": "SELECT COUNT(attendance.link_to_event) AS event_count, major.major_name FROM member LEFT JOIN attendance ON member.member_id = attendance.link_to_member LEFT JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';",
  "1397": "SELECT SUM(spent) * 1.0 / COUNT(*) AS average_spent FROM budget WHERE category = 'Food' AND event_status = 'Closed';",
  "1398": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1;",
  "1399": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer';",
  "1400": "SELECT (CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*)) AS community_service_percentage FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';",
  "1401": "SELECT expense.cost FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';",
  "1402": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;",
  "1403": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;",
  "1404": "SELECT budget.category, SUM(expense.cost) AS total_value FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY budget.category;",
  "1405": "SELECT SUM(b.amount) AS total_budget, b.category FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY b.category ORDER BY b.amount ASC;",
  "1406": "SELECT MAX(amount) FROM budget WHERE category = 'Food';",
  "1407": "SELECT amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;",
  "1408": "SELECT SUM(cost) AS total_parking_cost FROM expense WHERE expense_description = 'Parking';",
  "1409": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';",
  "1410": "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id;",
  "1411": "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
  "1412": "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';",
  "1413": "SELECT DISTINCT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50;",
  "1414": "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';",
  "1415": "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';",
  "1416": "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
  "1417": "SELECT DISTINCT e.type FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.remaining > 30;",
  "1418": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';",
  "1419": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';",
  "1420": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
  "1421": "SELECT CAST(SUM(CASE WHEN m.position = 'Member' AND mj.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(m.member_id) AS percentage FROM member AS m INNER JOIN major AS mj ON m.link_to_major = mj.major_id;",
  "1422": "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215';",
  "1423": "SELECT COUNT(*) FROM income WHERE amount = 50;",
  "1424": "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';",
  "1425": "SELECT COUNT(*) AS major_count FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';",
  "1426": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
  "1427": "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;",
  "1428": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member';",
  "1429": "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Social' AND event.location = '900 E. Washington St.' AND member.position = 'Vice President';",
  "1430": "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza';",
  "1431": "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Member' AND event.event_name = \"Women's Soccer\";",
  "1432": "SELECT (CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100) / COUNT(T1.member_id) AS percentage FROM member AS T1 LEFT JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member';",
  "1433": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box';",
  "1434": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';",
  "1435": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND SUBSTR(event_date, 1, 10) BETWEEN '2019-03-15' AND '2020-03-20';",
  "1436": "SELECT DISTINCT a.link_to_event FROM expense e INNER JOIN attendance a ON e.link_to_member = a.link_to_member WHERE e.cost > 50;",
  "1437": "SELECT m.first_name, m.last_name, a.link_to_event FROM member AS m INNER JOIN expense AS e ON m.member_id = e.link_to_member INNER JOIN attendance AS a ON m.member_id = a.link_to_member WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
  "1438": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';",
  "1439": "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';",
  "1440": "SELECT DISTINCT m.email FROM expense e INNER JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND e.cost > 20;",
  "1441": "SELECT COUNT(*) AS member_count FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Member' AND major.major_name = 'Education' AND major.college = 'College of Education & Human Services';",
  "1442": "SELECT CAST(SUM(CASE WHEN B.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(E.event_id) AS percentage_over_budget FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id;",
  "1443": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';",
  "1444": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;",
  "1445": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';",
  "1446": "SELECT (CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100.0) / COUNT(zip_code) AS percentage_po_box FROM zip_code;",
  "1447": "SELECT event.event_name, event.location FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;",
  "1448": "SELECT event.event_name, event.event_date FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;",
  "1449": "SELECT member.first_name, member.last_name, major.major_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100;",
  "1450": "SELECT z.city, z.county FROM income i INNER JOIN member m ON i.link_to_member = m.member_id INNER JOIN zip_code z ON m.zip = z.zip_code GROUP BY z.city, z.county HAVING COUNT(i.income_id) > 40;",
  "1451": "-- SQL query to find the member who paid the most amount for expenses incurred in more than one event SELECT m.first_name, m.last_name, SUM(e.cost) AS total_expenses FROM expense e JOIN member m ON e.link_to_member = m.member_id GROUP BY m.member_id HAVING COUNT(DISTINCT e.link_to_budget) > 1 ORDER BY total_expenses DESC LIMIT 1;",
  "1452": "SELECT CAST(SUM(e.cost) AS REAL) / COUNT(*) AS average_amount_paid FROM expense e INNER JOIN member m ON e.link_to_member = m.member_id WHERE m.position != 'Member';",
  "1453": "-- Step 1: Calculate the total parking cost for each event WITH TotalParkingCost AS ( SELECT b.link_to_event, SUM(e.cost) AS total_cost FROM expense e INNER JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.category = 'Parking' GROUP BY b.link_to_event ), -- Step 2: Calculate the average parking cost AverageParkingCost AS ( SELECT AVG(total_cost) AS avg_cost FROM TotalParkingCost ) -- Step 3: Filter events with total parking cost less than the average SELECT e.event_name FROM TotalParkingCost t INNER JOIN AverageParkingCost a ON t.total_cost < a.avg_cost INNER JOIN event e ON t.link_to_event = e.event_id;",
  "1454": "SELECT (SUM(expense.cost) * 100.0) / COUNT(DISTINCT event.event_id) AS percentage FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Meeting';",
  "1455": "SELECT b.budget_id FROM expense e INNER JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Water, chips, cookies' AND e.cost = ( SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies' );",
  "1456": "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id, member.first_name, member.last_name ORDER BY SUM(expense.cost) DESC LIMIT 5;",
  "1457": "SELECT DISTINCT m.first_name, m.last_name, m.phone FROM expense e INNER JOIN member m ON e.link_to_member = m.member_id WHERE e.cost > (SELECT AVG(cost) FROM expense);",
  "1458": "SELECT CAST(SUM(CASE WHEN z.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) / COUNT(m.member_id) - CAST(SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / COUNT(m.member_id) AS difference FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.position = 'Member';",
  "1459": "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
  "1460": "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
  "1461": "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';",
  "1462": "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
  "1463": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
  "1464": "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09';",
  "1465": "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
  "1466": "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';",
  "1467": "SELECT SUM(b.spent) AS total_spent, e.event_name FROM budget b INNER JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;",
  "1468": "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
  "1469": "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092;",
  "1470": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';",
  "1471": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 1.0 / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS EUR_to_CZK_Ratio FROM customers;",
  "1472": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012' AND T1.Segment = 'LAM' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1;",
  "1473": "SELECT AVG(y.Consumption) / 12 AS AverageMonthlyConsumption FROM customers c INNER JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'SME' AND y.Date BETWEEN '201301' AND '201312';",
  "1474": "SELECT customers.CustomerID FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Currency = 'CZK' AND yearmonth.Date BETWEEN '201101' AND '201112' GROUP BY customers.CustomerID ORDER BY SUM(yearmonth.Consumption) DESC LIMIT 1;",
  "1475": "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date BETWEEN '201201' AND '201212' GROUP BY T1.CustomerID HAVING SUM(T2.Consumption) < 30000;",
  "1476": "SELECT SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS Difference FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212';",
  "1477": "SELECT SUBSTR(T1.Date, 1, 4) AS Year, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY SUBSTR(T1.Date, 1, 4) ORDER BY TotalConsumption DESC LIMIT 1;",
  "1478": "SELECT customers.Segment FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY customers.Segment ORDER BY SUM(yearmonth.Consumption) ASC LIMIT 1;",
  "1479": "SELECT SUBSTR(yearmonth.Date, 1, 4) AS Year, SUM(yearmonth.Consumption) AS TotalConsumption FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;",
  "1480": "SELECT T2.Date AS PeakMonth FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312' GROUP BY T2.Date ORDER BY SUM(T2.Consumption) DESC LIMIT 1;",
  "1481": "-- SQL query to calculate differences in annual average consumption WITH filtered_customers AS ( -- Filter customers by segment (SME, LAM, KAM) and currency (CZK) SELECT CustomerID, Segment FROM customers WHERE Segment IN ('SME', 'LAM', 'KAM') AND Currency = 'CZK' ), total_consumption AS ( -- Calculate total annual consumption for each customer in 2013 SELECT yc.CustomerID, fc.Segment, SUM(yc.Consumption) AS TotalConsumption FROM yearmonth yc INNER JOIN filtered_customers fc ON yc.CustomerID = fc.CustomerID WHERE yc.Date BETWEEN '201301' AND '201312' GROUP BY yc.CustomerID, fc.Segment ), lowest_consumption AS ( -- Identify the customer with the lowest consumption in each segment SELECT Segment, MIN(TotalConsumption) AS LowestConsumption FROM total_consumption GROUP BY Segment ), segment_consumption AS ( -- Calculate annual average consumption for each segment SELECT Segment, LowestConsumption AS AnnualAverageConsumption FROM lowest_consumption ) -- Calculate the differences in annual average consumption SELECT (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'SME') - (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'LAM') AS SME_vs_LAM, (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'LAM') - (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'KAM') AS LAM_vs_KAM, (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'KAM') - (SELECT AnnualAverageConsumption FROM segment_consumption WHERE Segment = 'SME') AS KAM_vs_SME;",
  "1482": "-- Step 1: Calculate total consumption for 2012 and 2013 by segment WITH SegmentConsumption AS ( SELECT c.Segment, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2012' THEN y.Consumption ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2013' THEN y.Consumption ELSE 0 END) AS Consumption_2013 FROM customers c INNER JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'EUR' GROUP BY c.Segment ), -- Step 2: Calculate percentage increase for each segment PercentageIncrease AS ( SELECT Segment, Consumption_2012, Consumption_2013, CASE WHEN Consumption_2013 = 0 THEN NULL -- Avoid division by zero ELSE (Consumption_2013 - Consumption_2012) * 100.0 / Consumption_2013 END AS PercentageIncrease FROM SegmentConsumption ) -- Step 3: Find the segments with the highest and lowest percentage increases SELECT MAX(CASE WHEN PercentageIncrease = (SELECT MAX(PercentageIncrease) FROM PercentageIncrease) THEN Segment END) AS HighestIncrSegment, MIN(CASE WHEN PercentageIncrease = (SELECT MIN(PercentageIncrease) FROM PercentageIncrease) THEN Segment END) AS LowestIncrSegment FROM PercentageIncrease;",
  "1483": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID = 6 AND SUBSTR(Date, 1, 4) = '2013' AND SUBSTR(Date, 5, 2) BETWEEN '08' AND '11';",
  "1484": "SELECT (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS MoreDiscountGasStationsInCZE;",
  "1485": "SELECT SUM(CASE WHEN CustomerID = 7 THEN Consumption ELSE 0 END) - SUM(CASE WHEN CustomerID = 5 THEN Consumption ELSE 0 END) AS ConsumptionDifference FROM yearmonth WHERE Date = '201304';",
  "1486": "SELECT SUM(CASE WHEN c.Currency = 'CZK' THEN t.Amount ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN t.Amount ELSE 0 END) AS AmountDifference FROM customers AS c INNER JOIN transactions_1k AS t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'SME';",
  "1487": "SELECT customers.CustomerID FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'LAM' AND customers.Currency = 'EUR' AND yearmonth.Date = '201310' ORDER BY yearmonth.Consumption DESC LIMIT 1;",
  "1488": "SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c INNER JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
  "1489": "SELECT SUM(yearmonth.Consumption) AS TotalConsumption FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = '201305';",
  "1490": "SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(T1.CustomerID) AS Percentage FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM';",
  "1491": "SELECT Country, COUNT(*) AS ValueForMoneyCount FROM gasstations WHERE LOWER(Segment) = 'value for money' GROUP BY Country ORDER BY ValueForMoneyCount DESC;",
  "1492": "SELECT (CAST(COUNT(DISTINCT CASE WHEN Currency = 'EUR' THEN CustomerID END) AS REAL) * 100.0) / COUNT(DISTINCT CustomerID) AS PercentageOfKAMInEUR FROM customers WHERE Segment = 'KAM';",
  "1493": "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(CustomerID) AS Percentage FROM yearmonth WHERE Date = '201202';",
  "1494": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS PremiumPercentage FROM gasstations WHERE Country = 'SVK';",
  "1495": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;",
  "1496": "SELECT c.Segment FROM customers AS c INNER JOIN yearmonth AS ym ON c.CustomerID = ym.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY SUM(ym.Consumption) ASC LIMIT 1;",
  "1497": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date = '201206' ORDER BY T2.Consumption ASC LIMIT 1;",
  "1498": "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012';",
  "1499": "SELECT MAX(T2.Consumption / 12) AS MaxMonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR';",
  "1500": "SELECT DISTINCT p.Description FROM products p INNER JOIN transactions_1k t ON p.ProductID = t.ProductID INNER JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE y.Date = '201309';",
  "1501": "SELECT DISTINCT gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201306';",
  "1502": "SELECT DISTINCT g.ChainID FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE c.Currency = 'EUR';",
  "1503": "SELECT DISTINCT products.Description FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID INNER JOIN products ON transactions_1k.ProductID = products.ProductID WHERE customers.Currency = 'EUR';",
  "1504": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%';",
  "1505": "SELECT COUNT(DISTINCT T2.CustomerID) AS CustomerCount FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000;",
  "1506": "SELECT products.Description FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE';",
  "1507": "SELECT DISTINCT transactions_1k.Time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;",
  "1508": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000;",
  "1509": "-- Your SQL query SELECT COUNT(T.TransactionID) AS TransactionCount FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.Country = 'CZE' AND T.Date > '2012-01-01';",
  "1510": "SELECT AVG(T1.Amount * T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
  "1511": "SELECT AVG(T1.Amount * T1.Price) AS AverageTotalPrice FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR';",
  "1512": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1;",
  "1513": "SELECT g.Country FROM transactions_1k t INNER JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' AND t.Price > 0 ORDER BY t.Time ASC LIMIT 1;",
  "1514": "SELECT customers.Currency FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00';",
  "1515": "SELECT customers.Segment FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';",
  "1516": "SELECT COUNT(T1.TransactionID) AS TransactionCount FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK';",
  "1517": "SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);",
  "1518": "SELECT gasstations.Country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '12:42:00';",
  "1519": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';",
  "1520": "-- SQL query to find the expenses of the customer who paid 124.05 on 2012-08-24 in January 2012 SELECT Date, Consumption FROM yearmonth WHERE CustomerID = ( SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price * Amount = 124.05 ) AND Date = '201201';",
  "1521": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE';",
  "1522": "SELECT customers.Currency FROM yearmonth INNER JOIN customers ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201306' AND yearmonth.Consumption = 214582.17;",
  "1523": "SELECT DISTINCT gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.CardID = 667467;",
  "1524": "SELECT c.Currency FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Amount = 548.4;",
  "1525": "SELECT CAST(SUM(CASE WHEN customers.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT transactions_1k.CustomerID) AS EUR_Percentage FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25';",
  "1526": "SELECT (T2_2012.Consumption - T2_2013.Consumption) / T2_2012.Consumption AS ConsumptionDecreaseRate FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2_2012 ON T1.CustomerID = T2_2012.CustomerID AND T2_2012.Date LIKE '2012%' INNER JOIN yearmonth AS T2_2013 ON T1.CustomerID = T2_2013.CustomerID AND T2_2013.Date LIKE '2013%' WHERE T1.Amount = 634.8 AND T1.Date = '2012-08-25';",
  "1527": "SELECT gs.GasStationID FROM gasstations AS gs INNER JOIN transactions_1k AS t ON gs.GasStationID = t.GasStationID GROUP BY gs.GasStationID ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1;",
  "1528": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(GasStationID) AS PremiumPercentage FROM gasstations WHERE Country = 'SVK';",
  "1529": "-- SQL query to calculate the total amount spent by customer 38508 in January 2012 SELECT SUM(Amount) AS TotalSpentInJanuary2012 FROM transactions_1k WHERE CustomerID = 38508 AND Date = '201201';",
  "1530": "SELECT P.Description FROM transactions_1k T INNER JOIN products P ON T.ProductID = P.ProductID GROUP BY T.ProductID ORDER BY SUM(T.Amount) DESC LIMIT 5;",
  "1531": "SELECT T1.CustomerID, SUM(T1.Price) / SUM(T1.Amount) AS AvgPricePerItem, T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1;",
  "1532": "SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 AND t.Amount = 1 ORDER BY t.Price DESC LIMIT 1;",
  "1533": "SELECT Consumption FROM yearmonth WHERE Date = '201208' AND CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE ProductID = 5 AND (Price / Amount) > 29.0 );"
}